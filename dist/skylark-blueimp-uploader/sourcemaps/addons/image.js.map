{"version":3,"sources":["addons/image.js"],"names":["define","langx","eventer","imagex","$","blueimp","fileuploadui","prototype","options","processQueue","unshift","action","disableImageHead","disableExif","disableExifThumbnail","disableExifSub","disableExifGps","disabled","prefix","fileTypes","maxFileSize","noRevoke","maxWidth","maxHeight","minWidth","minHeight","crop","orientation","forceResize","quality","type","thumbnail","canvas","name","widget","loadImageFileTypes","loadImageMaxFileSize","imageMaxWidth","imageMaxHeight","imageOrientation","imageCrop","disableImageResize","previewMaxWidth","previewMaxHeight","previewOrientation","previewThumbnail","previewCrop","previewCanvas","processActions","loadImage","data","that","this","file","files","index","dfd","Deferred","size","test","loadFile","img","src","resolveWith","promise","resizeImage","extend","resolve","newImg","width","height","getContext","preview","exif","get","scale","saveImage","toBlob","blob","replace","substr","imageHead","loadImageMetaData","meta","parseMetaData","result","saveImageMetaData","Blob","_blobSlice","call","setImage","deleteImageReferences"],"mappings":"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","file":"../../addons/image.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-imagex\",\r\n    'skylark-jquery',\r\n    'skylark-jqueryui/widget',\r\n    \"../fileupload-ui\"\r\n],function (langx,eventer,imagex,$) {\r\n    'use strict';\r\n\r\n    // Prepend to the default processQueue:\r\n    $.blueimp.fileuploadui.prototype.options.processQueue.unshift(\r\n        {\r\n            action: 'loadImageMetaData',\r\n            disableImageHead: '@',\r\n            disableExif: '@',\r\n            disableExifThumbnail: '@',\r\n            disableExifSub: '@',\r\n            disableExifGps: '@',\r\n            disabled: '@disableImageMetaDataLoad'\r\n        },\r\n        {\r\n            action: 'loadImage',\r\n            // Use the action as prefix for the \"@\" options:\r\n            prefix: true,\r\n            fileTypes: '@',\r\n            maxFileSize: '@',\r\n            noRevoke: '@',\r\n            disabled: '@disableImageLoad'\r\n        },\r\n        {\r\n            action: 'resizeImage',\r\n            // Use \"image\" as prefix for the \"@\" options:\r\n            prefix: 'image',\r\n            maxWidth: '@',\r\n            maxHeight: '@',\r\n            minWidth: '@',\r\n            minHeight: '@',\r\n            crop: '@',\r\n            orientation: '@',\r\n            forceResize: '@',\r\n            disabled: '@disableImageResize'\r\n        },\r\n        {\r\n            action: 'saveImage',\r\n            quality: '@imageQuality',\r\n            type: '@imageType',\r\n            disabled: '@disableImageResize'\r\n        },\r\n        {\r\n            action: 'saveImageMetaData',\r\n            disabled: '@disableImageMetaDataSave'\r\n        },\r\n        {\r\n            action: 'resizeImage',\r\n            // Use \"preview\" as prefix for the \"@\" options:\r\n            prefix: 'preview',\r\n            maxWidth: '@',\r\n            maxHeight: '@',\r\n            minWidth: '@',\r\n            minHeight: '@',\r\n            crop: '@',\r\n            orientation: '@',\r\n            thumbnail: '@',\r\n            canvas: '@',\r\n            disabled: '@disableImagePreview'\r\n        },\r\n        {\r\n            action: 'setImage',\r\n            name: '@imagePreviewName',\r\n            disabled: '@disableImagePreview'\r\n        },\r\n        {\r\n            action: 'deleteImageReferences',\r\n            disabled: '@disableImageReferencesDeletion'\r\n        }\r\n    );\r\n\r\n    // The File Upload Resize plugin extends the fileupload widget\r\n    // with image resize functionality:\r\n    $.widget('blueimp.fileuploadui', $.blueimp.fileuploadui, {\r\n\r\n        options: {\r\n            // The regular expression for the types of images to load:\r\n            // matched against the file type:\r\n            loadImageFileTypes: /^image\\/(gif|jpeg|png|svg\\+xml)$/,\r\n            // The maximum file size of images to load:\r\n            loadImageMaxFileSize: 10000000, // 10MB\r\n            // The maximum width of resized images:\r\n            imageMaxWidth: 1920,\r\n            // The maximum height of resized images:\r\n            imageMaxHeight: 1080,\r\n            // Defines the image orientation (1-8) or takes the orientation\r\n            // value from Exif data if set to true:\r\n            imageOrientation: false,\r\n            // Define if resized images should be cropped or only scaled:\r\n            imageCrop: false,\r\n            // Disable the resize image functionality by default:\r\n            disableImageResize: true,\r\n            // The maximum width of the preview images:\r\n            previewMaxWidth: 80,\r\n            // The maximum height of the preview images:\r\n            previewMaxHeight: 80,\r\n            // Defines the preview orientation (1-8) or takes the orientation\r\n            // value from Exif data if set to true:\r\n            previewOrientation: true,\r\n            // Create the preview using the Exif data thumbnail:\r\n            previewThumbnail: true,\r\n            // Define if preview images should be cropped or only scaled:\r\n            previewCrop: false,\r\n            // Define if preview images should be resized as canvas elements:\r\n            previewCanvas: true\r\n        },\r\n\r\n        processActions: {\r\n\r\n            // Loads the image given via data.files and data.index\r\n            // as img element, if the browser supports the File API.\r\n            // Accepts the options fileTypes (regular expression)\r\n            // and maxFileSize (integer) to limit the files to load:\r\n            loadImage: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var that = this,\r\n                    file = data.files[data.index],\r\n                    dfd = $.Deferred();\r\n                if (($.type(options.maxFileSize) === 'number' &&\r\n                            file.size > options.maxFileSize) ||\r\n                        (options.fileTypes &&\r\n                            !options.fileTypes.test(file.type)) ||\r\n                        !imagex.loadFile(\r\n                            file,\r\n                            function (img) {\r\n                                if (img.src) {\r\n                                    data.img = img;\r\n                                }\r\n                                dfd.resolveWith(that, [data]);\r\n                            },\r\n                            options\r\n                        )) {\r\n                    return data;\r\n                }\r\n                return dfd.promise();\r\n            },\r\n\r\n            // Resizes the image given as data.canvas or data.img\r\n            // and updates data.canvas or data.img with the resized image.\r\n            // Also stores the resized image as preview property.\r\n            // Accepts the options maxWidth, maxHeight, minWidth,\r\n            // minHeight, canvas and crop:\r\n            resizeImage: function (data, options) {\r\n                if (options.disabled || !(data.canvas || data.img)) {\r\n                    return data;\r\n                }\r\n                options = $.extend({canvas: true}, options);\r\n                var that = this,\r\n                    dfd = $.Deferred(),\r\n                    img = (options.canvas && data.canvas) || data.img,\r\n                    resolve = function (newImg) {\r\n                        if (newImg && (newImg.width !== img.width ||\r\n                                newImg.height !== img.height ||\r\n                                options.forceResize)) {\r\n                            data[newImg.getContext ? 'canvas' : 'img'] = newImg;\r\n                        }\r\n                        data.preview = newImg;\r\n                        dfd.resolveWith(that, [data]);\r\n                    },\r\n                    thumbnail;\r\n                if (data.exif) {\r\n                    if (options.orientation === true) {\r\n                        options.orientation = data.exif.get('Orientation');\r\n                    }\r\n                    if (options.thumbnail) {\r\n                        thumbnail = data.exif.get('Thumbnail');\r\n                        if (thumbnail) {\r\n                            imagex.loadFile(thumbnail, resolve, options);\r\n                            return dfd.promise();\r\n                        }\r\n                    }\r\n                    // Prevent orienting the same image twice:\r\n                    if (data.orientation) {\r\n                        delete options.orientation;\r\n                    } else {\r\n                        data.orientation = options.orientation;\r\n                    }\r\n                }\r\n                if (img) {\r\n                    resolve(imagex.scale(img, options));\r\n                    return dfd.promise();\r\n                }\r\n                return data;\r\n            },\r\n\r\n            // Saves the processed image given as data.canvas\r\n            // inplace at data.index of data.files:\r\n            saveImage: function (data, options) {\r\n                if (!data.canvas || options.disabled) {\r\n                    return data;\r\n                }\r\n                var that = this,\r\n                    file = data.files[data.index],\r\n                    dfd = $.Deferred();\r\n                if (data.canvas.toBlob) {\r\n                    data.canvas.toBlob(\r\n                        function (blob) {\r\n                            if (!blob.name) {\r\n                                if (file.type === blob.type) {\r\n                                    blob.name = file.name;\r\n                                } else if (file.name) {\r\n                                    blob.name = file.name.replace(\r\n                                        /\\..+$/,\r\n                                        '.' + blob.type.substr(6)\r\n                                    );\r\n                                }\r\n                            }\r\n                            // Don't restore invalid meta data:\r\n                            if (file.type !== blob.type) {\r\n                                delete data.imageHead;\r\n                            }\r\n                            // Store the created blob at the position\r\n                            // of the original file in the files list:\r\n                            data.files[data.index] = blob;\r\n                            dfd.resolveWith(that, [data]);\r\n                        },\r\n                        options.type || file.type,\r\n                        options.quality\r\n                    );\r\n                } else {\r\n                    return data;\r\n                }\r\n                return dfd.promise();\r\n            },\r\n\r\n            loadImageMetaData: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var that = this,\r\n                    dfd = $.Deferred();\r\n                imagex.meta.parseMetaData(data.files[data.index], function (result) {\r\n                    $.extend(data, result);\r\n                    dfd.resolveWith(that, [data,\"aaa\"]);\r\n                }, options);\r\n                return dfd.promise();\r\n            },\r\n\r\n            saveImageMetaData: function (data, options) {\r\n                if (!(data.imageHead && data.canvas &&\r\n                        data.canvas.toBlob && !options.disabled)) {\r\n                    return data;\r\n                }\r\n                var file = data.files[data.index],\r\n                    blob = new Blob([\r\n                        data.imageHead,\r\n                        // Resized images always have a head size of 20 bytes,\r\n                        // including the JPEG marker and a minimal JFIF header:\r\n                        this._blobSlice.call(file, 20)\r\n                    ], {type: file.type});\r\n                blob.name = file.name;\r\n                data.files[data.index] = blob;\r\n                return data;\r\n            },\r\n\r\n            // Sets the resized version of the image as a property of the\r\n            // file object, must be called after \"saveImage\":\r\n            setImage: function (data, options) {\r\n                if (data.preview && !options.disabled) {\r\n                    data.files[data.index][options.name || 'preview'] = data.preview;\r\n                }\r\n                return data;\r\n            },\r\n\r\n            deleteImageReferences: function (data, options) {\r\n                if (!options.disabled) {\r\n                    delete data.img;\r\n                    delete data.canvas;\r\n                    delete data.preview;\r\n                    delete data.imageHead;\r\n                }\r\n                return data;\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n});\r\n"]}