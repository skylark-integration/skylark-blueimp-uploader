{"version":3,"sources":["addons/validate.js"],"names":["define","langx","eventer","$","blueimp","fileuploadui","prototype","options","processQueue","push","action","always","acceptFileTypes","maxFileSize","minFileSize","maxNumberOfFiles","disabled","widget","getNumberOfFiles","noop","messages","processActions","validate","data","fileSize","dfd","Deferred","settings","this","file","files","index","size","type","length","error","i18n","test","name","rejectWith","resolveWith","promise"],"mappings":";;;;;;;AAAAA,QACI,sBACA,4BACA,iBACA,0BACA,oBACF,SAAUC,EAAMC,EAAQC,GACtB,aA0FA,OAvFAA,EAAEC,QAAQC,aAAaC,UAAUC,QAAQC,aAAaC,MAE9CC,OAAQ,WAGRC,QAAQ,EAERC,gBAAiB,IACjBC,YAAa,IACbC,YAAa,IACbC,iBAAkB,IAClBC,SAAU,uBAMlBb,EAAEc,OAAO,uBAAwBd,EAAEC,QAAQC,cAEvCE,SAeIW,iBAAkBf,EAAEgB,KAGpBC,UACIL,iBAAkB,mCAClBH,gBAAiB,wBACjBC,YAAa,oBACbC,YAAa,sBAIrBO,gBAEIC,SAAU,SAAUC,EAAMhB,GACtB,GAAIA,EAAQS,SACR,OAAOO,EAEX,IAGIC,EAHAC,EAAMtB,EAAEuB,WACRC,EAAWC,KAAKrB,QAChBsB,EAAON,EAAKO,MAAMP,EAAKQ,OA2B3B,OAzBIxB,EAAQO,aAAeP,EAAQM,eAC/BW,EAAWK,EAAKG,MAEqB,WAArC7B,EAAE8B,KAAK1B,EAAQQ,oBACVY,EAAST,oBAAsB,GAAKK,EAAKO,MAAMI,OAC5C3B,EAAQQ,iBAChBc,EAAKM,MAAQR,EAASS,KAAK,qBACpB7B,EAAQK,iBACTL,EAAQK,gBAAgByB,KAAKR,EAAKI,OACpC1B,EAAQK,gBAAgByB,KAAKR,EAAKS,MAE/Bd,EAAWjB,EAAQM,YAC1BgB,EAAKM,MAAQR,EAASS,KAAK,eACC,WAArBjC,EAAE8B,KAAKT,IACVA,EAAWjB,EAAQO,YACvBe,EAAKM,MAAQR,EAASS,KAAK,sBAEpBP,EAAKM,MAPZN,EAAKM,MAAQR,EAASS,KAAK,mBAS3BP,EAAKM,OAASZ,EAAKO,MAAMK,OACzBZ,EAAKO,MAAMK,OAAQ,EACnBV,EAAIc,WAAWX,MAAOL,KAEtBE,EAAIe,YAAYZ,MAAOL,IAEpBE,EAAIgB,cAOhBtC","file":"../../addons/validate.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    'skylark-jquery',\r\n    'skylark-jqueryui/widget',\r\n    \"../fileupload-ui\"\r\n],function (langx,eventer,$) {\r\n    'use strict';\r\n\r\n    // Append to the default processQueue:\r\n    $.blueimp.fileuploadui.prototype.options.processQueue.push(\r\n        {\r\n            action: 'validate',\r\n            // Always trigger this action,\r\n            // even if the previous action was rejected: \r\n            always: true,\r\n            // Options taken from the global options map:\r\n            acceptFileTypes: '@',\r\n            maxFileSize: '@',\r\n            minFileSize: '@',\r\n            maxNumberOfFiles: '@',\r\n            disabled: '@disableValidation'\r\n        }\r\n    );\r\n\r\n    // The File Upload Validation plugin extends the fileupload widget\r\n    // with file validation functionality:\r\n    $.widget('blueimp.fileuploadui', $.blueimp.fileuploadui, {\r\n\r\n        options: {\r\n            /*\r\n            // The regular expression for allowed file types, matches\r\n            // against either file type or file name:\r\n            acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\r\n            // The maximum allowed file size in bytes:\r\n            maxFileSize: 10000000, // 10 MB\r\n            // The minimum allowed file size in bytes:\r\n            minFileSize: undefined, // No minimal file size\r\n            // The limit of files to be uploaded:\r\n            maxNumberOfFiles: 10,\r\n            */\r\n\r\n            // Function returning the current number of files,\r\n            // has to be overriden for maxNumberOfFiles validation:\r\n            getNumberOfFiles: $.noop,\r\n\r\n            // Error and info messages:\r\n            messages: {\r\n                maxNumberOfFiles: 'Maximum number of files exceeded',\r\n                acceptFileTypes: 'File type not allowed',\r\n                maxFileSize: 'File is too large',\r\n                minFileSize: 'File is too small'\r\n            }\r\n        },\r\n\r\n        processActions: {\r\n\r\n            validate: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var dfd = $.Deferred(),\r\n                    settings = this.options,\r\n                    file = data.files[data.index],\r\n                    fileSize;\r\n                if (options.minFileSize || options.maxFileSize) {\r\n                    fileSize = file.size;\r\n                }\r\n                if ($.type(options.maxNumberOfFiles) === 'number' &&\r\n                        (settings.getNumberOfFiles() || 0) + data.files.length >\r\n                            options.maxNumberOfFiles) {\r\n                    file.error = settings.i18n('maxNumberOfFiles');\r\n                } else if (options.acceptFileTypes &&\r\n                        !(options.acceptFileTypes.test(file.type) ||\r\n                        options.acceptFileTypes.test(file.name))) {\r\n                    file.error = settings.i18n('acceptFileTypes');\r\n                } else if (fileSize > options.maxFileSize) {\r\n                    file.error = settings.i18n('maxFileSize');\r\n                } else if ($.type(fileSize) === 'number' &&\r\n                        fileSize < options.minFileSize) {\r\n                    file.error = settings.i18n('minFileSize');\r\n                } else {\r\n                    delete file.error;\r\n                }\r\n                if (file.error || data.files.error) {\r\n                    data.files.error = true;\r\n                    dfd.rejectWith(this, [data]);\r\n                } else {\r\n                    dfd.resolveWith(this, [data]);\r\n                }\r\n                return dfd.promise();\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n\r\n});\r\n"]}