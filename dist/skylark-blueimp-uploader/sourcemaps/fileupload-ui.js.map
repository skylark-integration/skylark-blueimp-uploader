{"version":3,"sources":["fileupload-ui.js"],"names":["define","langx","eventer","$","tmpl","blueimp","fileupload","prototype","_specialOptions","push","widget","processActions","_processFile","data","originalData","skylark","that","this","funcs","map","processQueue","setting","action","call","async","waterful","_transformProcessQueue","options","each","settings","prefix","key","value","type","charAt","slice","toUpperCase","processing","_processing","process","extend","length","_trigger","files","index","opts","func","errorThrown","Deferred","rejectWith","promise","_processingQueue","pipe","always","autoUpload","uploadTemplateId","downloadTemplateId","filesContainer","undefined","prependFiles","dataType","getNumberOfFiles","children","not","getFilesFromResponse","result","isArray","add","e","$this","context","_renderUpload","addClass","_forceReflow","_transition","fileuploadui","find","text","_formatFileSize","size","removeClass","_renderPreviews","done","prop","submit","fail","error","send","isDefaultPrevented","substr","support","transition","attr","first","css","template","deferred","file","_addFinishedDeferreds","node","_renderDownload","replaceAll","resolve","remove","progress","Math","floor","loaded","total","progressall","globalProgressNode","extendedProgressNode","html","_renderExtendedProgress","start","_resetFinishedDeferreds","stop","when","apply","_getFinishedDeferreds","processstart","processstop","destroy","removeNode","url","ajax","_finishedUploads","_enableDragToDesktop","link","name","bind","originalEvent","dataTransfer","setData","join","ignore","bytes","toFixed","_formatBitrate","bits","_formatTime","seconds","date","Date","days","getUTCHours","getUTCMinutes","getUTCSeconds","_formatPercentage","floatValue","bitrate","_renderTemplate","formatFileSize","templatesContainer","elm","append","preview","uploadTemplate","downloadTemplate","end","_startHandler","preventDefault","button","currentTarget","closest","_cancelHandler","abort","_deleteHandler","offsetWidth","dfd","hasClass","is","target","unbind","resolveWith","toggleClass","_initButtonBarEventHandlers","fileUploadButtonBar","element","filesList","_on","click","change","_destroyButtonBarEventHandlers","_off","_initEventHandlers","click .start","click .cancel","click .delete","_destroyEventHandlers","_super","_enableFileInputButton","parent","_disableFileInputButton","_initTemplates","document","createElement","_initFilesContainer","_initSpecialOptions","_create","fileInput","enable","wasDisabled","disabled","disable"],"mappings":"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","file":"../fileupload-ui.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-jquery\",\r\n    \"./tmpl\",\r\n    \"./fileupload\"\r\n],function (langx,eventer,$,tmpl) {\r\n\r\n    'use strict';\r\n\r\n    $.blueimp.fileupload.prototype._specialOptions.push(\r\n        'filesContainer',\r\n        'uploadTemplateId',\r\n        'downloadTemplateId'\r\n    );\r\n\r\n    // The UI version extends the file upload widget\r\n    // and adds complete user interface interaction:\r\n    $.widget('blueimp.fileuploadui',  {\r\n        processActions: {\r\n            /*\r\n            log: function (data, options) {\r\n                console[options.type](\r\n                    'Processing \"' + data.files[data.index].name + '\"'\r\n                );\r\n            }\r\n            */\r\n        },\r\n\r\n        _processFile: function (data, originalData) {\r\n            /*\r\n            var that = this,\r\n                dfd = $.Deferred().resolveWith(that, [data]),\r\n                chain = dfd.promise();\r\n            this._trigger('process', null, data);\r\n            $.each(data.processQueue, function (i, settings) {\r\n                var func = function (data) {\r\n                    if (originalData.errorThrown) {\r\n                        return $.Deferred()\r\n                                .rejectWith(that, [originalData]).promise();\r\n                    }\r\n                    return that.processActions[settings.action].call(\r\n                        that,\r\n                        data,\r\n                        settings\r\n                    );\r\n                };\r\n                chain = chain.pipe(func, settings.always && func);\r\n            });\r\n            chain\r\n                .done(function () {\r\n                    that._trigger('processdone', null, data);\r\n                    that._trigger('processalways', null, data);\r\n                })\r\n                .fail(function () {\r\n                    that._trigger('processfail', null, data);\r\n                    that._trigger('processalways', null, data);\r\n                });\r\n            return chain;\r\n            */\r\n            var langx = $.skylark.langx,\r\n                that = this;\r\n            var funcs = langx.map(data.processQueue,function(setting) {\r\n                var func = function (data) {\r\n                    return that.processActions[setting.action].call(\r\n                        that,\r\n                        data,\r\n                        setting\r\n                    );\r\n                };\r\n                return func;                \r\n            });\r\n            return langx.async.waterful(funcs,[data],that);\r\n        },\r\n\r\n        // Replaces the settings of each processQueue item that\r\n        // are strings starting with an \"@\", using the remaining\r\n        // substring as key for the option map,\r\n        // e.g. \"@autoUpload\" is replaced with options.autoUpload:\r\n        _transformProcessQueue: function (options) {\r\n            var processQueue = [];\r\n            $.each(options.processQueue, function () {\r\n                var settings = {},\r\n                    action = this.action,\r\n                    prefix = this.prefix === true ? action : this.prefix;\r\n                $.each(this, function (key, value) {\r\n                    if ($.type(value) === 'string' &&\r\n                            value.charAt(0) === '@') {\r\n                        settings[key] = options[\r\n                            value.slice(1) || (prefix ? prefix +\r\n                                key.charAt(0).toUpperCase() + key.slice(1) : key)\r\n                        ];\r\n                    } else {\r\n                        settings[key] = value;\r\n                    }\r\n\r\n                });\r\n                processQueue.push(settings);\r\n            });\r\n            options.processQueue = processQueue;\r\n        },\r\n\r\n        // Returns the number of files currently in the processsing queue:\r\n        processing: function () {\r\n            return this._processing;\r\n        },\r\n\r\n        // Processes the files given as files property of the data parameter,\r\n        // returns a Promise object that allows to bind callbacks:\r\n        process: function (data) {\r\n            var that = this,\r\n                options = $.extend({}, this.options, data);\r\n            if (options.processQueue && options.processQueue.length) {\r\n                this._transformProcessQueue(options);\r\n                if (this._processing === 0) {\r\n                    this._trigger('processstart');\r\n                }\r\n                $.each(data.files, function (index) {\r\n                    var opts = index ? $.extend({}, options) : options,\r\n                        func = function () {\r\n                            if (data.errorThrown) {\r\n                                return $.Deferred()\r\n                                        .rejectWith(that, [data]).promise();\r\n                            }\r\n                            return that._processFile(opts, data);\r\n                        };\r\n                    opts.index = index;\r\n                    that._processing += 1;\r\n                    that._processingQueue = that._processingQueue.pipe(func, func)\r\n                        .always(function () {\r\n                            that._processing -= 1;\r\n                            if (that._processing === 0) {\r\n                                that._trigger('processstop');\r\n                            }\r\n                        });\r\n                });\r\n            }\r\n            return this._processingQueue;\r\n        },\r\n\r\n\r\n        options: {\r\n            // The list of processing actions:\r\n            processQueue: [\r\n                /*\r\n                {\r\n                    action: 'log',\r\n                    type: 'debug'\r\n                }\r\n                */\r\n            ],\r\n\r\n\r\n\r\n            // By default, files added to the widget are uploaded as soon\r\n            // as the user clicks on the start buttons. To enable automatic\r\n            // uploads, set the following option to true:\r\n            autoUpload: false,\r\n            // The ID of the upload template:\r\n            uploadTemplateId: 'template-upload',\r\n            // The ID of the download template:\r\n            downloadTemplateId: 'template-download',\r\n            // The container for the list of files. If undefined, it is set to\r\n            // an element with class \"files\" inside of the widget element:\r\n            filesContainer: undefined,\r\n            // By default, files are appended to the files container.\r\n            // Set the following option to true, to prepend files instead:\r\n            prependFiles: false,\r\n            // The expected data type of the upload response, sets the dataType\r\n            // option of the $.ajax upload requests:\r\n            dataType: 'json',\r\n\r\n            // Function returning the current number of files,\r\n            // used by the maxNumberOfFiles validation:\r\n            getNumberOfFiles: function () {\r\n                return this.filesContainer.children()\r\n                    .not('.processing').length;\r\n            },\r\n\r\n            // Callback to retrieve the list of files from the server response:\r\n            getFilesFromResponse: function (data) {\r\n                if (data.result && $.isArray(data.result.files)) {\r\n                    return data.result.files;\r\n                }\r\n                return [];\r\n            },\r\n\r\n            // The add callback is invoked as soon as files are added to the fileupload\r\n            // widget (via file input selection, drag & drop or add API call).\r\n            // See the basic file upload widget for more information:\r\n            add: function (e, data) {\r\n                //if (e.isDefaultPrevented()) {\r\n                //    return false;\r\n                //}\r\n                var $this = $(this),\r\n                    that = $this.data('blueimp-fileuploadui') ||\r\n                        $this.data('fileupload'),\r\n                    options = that.options;\r\n                data.context = that._renderUpload(data.files)\r\n                    .data('data', data)\r\n                    .addClass('processing');\r\n                options.filesContainer[\r\n                    options.prependFiles ? 'prepend' : 'append'\r\n                ](data.context);\r\n                that._forceReflow(data.context);\r\n                that._transition(data.context);\r\n//                data.process(function () {\r\n//                    return $this.fileupload('process', data);\r\n//                }).always(function () {\r\n                $this.fileuploadui('process', data).always(function () {\r\n                    data.context.each(function (index) {\r\n                        $(this).find('.size').text(\r\n                            that._formatFileSize(data.files[index].size)\r\n                        );\r\n                    }).removeClass('processing');\r\n                    that._renderPreviews(data);\r\n                }).done(function () {\r\n                    data.context.find('.start').prop('disabled', false);\r\n                    if ((that._trigger('added', null,data) !== false) &&\r\n                            (options.autoUpload || data.autoUpload) &&\r\n                            data.autoUpload !== false) {\r\n                        data.submit();\r\n                    }\r\n                }).fail(function () {\r\n                    if (data.files.error) {\r\n                        data.context.each(function (index) {\r\n                            var error = data.files[index].error;\r\n                            if (error) {\r\n                                $(this).find('.error').text(error);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            },\r\n            // Callback for the start of each file upload request:\r\n            send: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload');\r\n                if (data.context && data.dataType &&\r\n                        data.dataType.substr(0, 6) === 'iframe') {\r\n                    // Iframe Transport does not support progress events.\r\n                    // In lack of an indeterminate progress bar, we set\r\n                    // the progress to 100%, showing the full animated bar:\r\n                    data.context\r\n                        .find('.progress').addClass(\r\n                            !$.support.transition && 'progress-animated'\r\n                        )\r\n                        .attr('aria-valuenow', 100)\r\n                        .children().first().css(\r\n                            'width',\r\n                            '100%'\r\n                        );\r\n                }\r\n                return that._trigger('sent', null,data);\r\n            },\r\n            // Callback for successful uploads:\r\n            done: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload'),\r\n                    getFilesFromResponse = data.getFilesFromResponse ||\r\n                        that.options.getFilesFromResponse,\r\n                    files = getFilesFromResponse(data),\r\n                    template,\r\n                    deferred;\r\n                if (data.context) {\r\n                    data.context.each(function (index) {\r\n                        var file = files[index] ||\r\n                                {error: 'Empty file upload result'};\r\n                        deferred = that._addFinishedDeferreds();\r\n                        that._transition($(this)).done(\r\n                            function () {\r\n                                var node = $(this);\r\n//                                template = that._renderDownload([file]);\r\n                                template = that._renderDownload([file])\r\n                                    .replaceAll(node);\r\n                                that._forceReflow(template);\r\n                                that._transition(template).done(\r\n                                    function () {\r\n                                        data.context = $(this);\r\n                                        that._trigger('completed', null,data);\r\n                                        that._trigger('finished', null,data);\r\n                                        deferred.resolve();\r\n                                    }\r\n                                );\r\n                            }\r\n                        );\r\n                    });\r\n                } else {\r\n                    template = that._renderDownload(files)[\r\n                        that.options.prependFiles ? 'prependTo' : 'appendTo'\r\n                    ](that.options.filesContainer);\r\n                    that._forceReflow(template);\r\n                    deferred = that._addFinishedDeferreds();\r\n                    that._transition(template).done(\r\n                        function () {\r\n                            data.context = $(this);\r\n                            that._trigger('completed', null,data);\r\n                            that._trigger('finished', null,data);\r\n                            deferred.resolve();\r\n                        }\r\n                    );\r\n                }\r\n            },\r\n            // Callback for failed (abort or error) uploads:\r\n            fail: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload'),\r\n                    template,\r\n                    deferred;\r\n                if (data.context) {\r\n                    data.context.each(function (index) {\r\n                        if (data.errorThrown !== 'abort') {\r\n                            var file = data.files[index];\r\n                            file.error = file.error || data.errorThrown ||\r\n                                true;\r\n                            deferred = that._addFinishedDeferreds();\r\n                            that._transition($(this)).done(\r\n                                function () {\r\n                                    var node = $(this);\r\n                                    template = that._renderDownload([file])\r\n                                        .replaceAll(node);\r\n                                    that._forceReflow(template);\r\n                                    that._transition(template).done(\r\n                                        function () {\r\n                                            data.context = $(this);\r\n                                            that._trigger('failed', null,data);\r\n                                            that._trigger('finished', null,data);\r\n                                            deferred.resolve();\r\n                                        }\r\n                                    );\r\n                                }\r\n                            );\r\n                        } else {\r\n                            deferred = that._addFinishedDeferreds();\r\n                            that._transition($(this)).done(\r\n                                function () {\r\n                                    $(this).remove();\r\n                                    that._trigger('failed', null,data);\r\n                                    that._trigger('finished', null,data);\r\n                                    deferred.resolve();\r\n                                }\r\n                            );\r\n                        }\r\n                    });\r\n                } else if (data.errorThrown !== 'abort') {\r\n                    data.context = that._renderUpload(data.files)[\r\n                        that.options.prependFiles ? 'prependTo' : 'appendTo'\r\n                    ](that.options.filesContainer)\r\n                        .data('data', data);\r\n                    that._forceReflow(data.context);\r\n                    deferred = that._addFinishedDeferreds();\r\n                    that._transition(data.context).done(\r\n                        function () {\r\n                            data.context = $(this);\r\n                            that._trigger('failed', null,data);\r\n                            that._trigger('finished', null,data);\r\n                            deferred.resolve();\r\n                        }\r\n                    );\r\n                } else {\r\n                    that._trigger('failed', null,data);\r\n                    that._trigger('finished', null,data);\r\n                    that._addFinishedDeferreds().resolve();\r\n                }\r\n            },\r\n            // Callback for upload progress events:\r\n            progress: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var progress = Math.floor(data.loaded / data.total * 100);\r\n                if (data.context) {\r\n                    data.context.each(function () {\r\n                        $(this).find('.progress')\r\n                            .attr('aria-valuenow', progress)\r\n                            .children().first().css(\r\n                                'width',\r\n                                progress + '%'\r\n                            );\r\n                    });\r\n                }\r\n            },\r\n            // Callback for global upload progress events:\r\n            progressall: function (e, data) {\r\n                //if (e.isDefaultPrevented()) {\r\n                //    return false;\r\n                //}\r\n                var $this = $(this),\r\n                    progress = Math.floor(data.loaded / data.total * 100),\r\n                    globalProgressNode = $this.find('.fileupload-progress'),\r\n                    extendedProgressNode = globalProgressNode\r\n                        .find('.progress-extended');\r\n                if (extendedProgressNode.length) {\r\n                    extendedProgressNode.html(\r\n                        ($this.data('blueimp-fileuploadui') || $this.data('fileupload'))\r\n                            ._renderExtendedProgress(data)\r\n                    );\r\n                }\r\n                globalProgressNode\r\n                    .find('.progress')\r\n                    .attr('aria-valuenow', progress)\r\n                    .children().first().css(\r\n                        'width',\r\n                        progress + '%'\r\n                    );\r\n            },\r\n            // Callback for uploads start, equivalent to the global ajaxStart event:\r\n            start: function (e) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload');\r\n                that._resetFinishedDeferreds();\r\n                that._transition($(this).find('.fileupload-progress')).done(\r\n                    function () {\r\n                        that._trigger('started', null);\r\n                    }\r\n                );\r\n            },\r\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\r\n            stop: function (e) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload'),\r\n                    deferred = that._addFinishedDeferreds();\r\n                $.when.apply($, that._getFinishedDeferreds())\r\n                    .done(function () {\r\n                        that._trigger('stopped', null);\r\n                    });\r\n                that._transition($(this).find('.fileupload-progress')).done(\r\n                    function () {\r\n                        $(this).find('.progress')\r\n                            .attr('aria-valuenow', '0')\r\n                            .children().first().css('width', '0%');\r\n                        $(this).find('.progress-extended').html('&nbsp;');\r\n                        deferred.resolve();\r\n                    }\r\n                );\r\n            },\r\n            processstart: function (e) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                $(this).addClass('fileupload-processing');\r\n            },\r\n            processstop: function (e) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                $(this).removeClass('fileupload-processing');\r\n            },\r\n            // Callback for file deletion:\r\n            destroy: function (e, data) {\r\n                //if (e.isDefaultPrevented()) {\r\n                //    return false;\r\n                //}\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload'),\r\n                    removeNode = function () {\r\n                        that._transition(data.context).done(\r\n                            function () {\r\n                                $(this).remove();\r\n                                that._trigger('destroyed', null,data);\r\n                            }\r\n                        );\r\n                    };\r\n                if (data.url) {\r\n                    data.dataType = data.dataType || that.options.dataType;\r\n                    $.ajax(data).done(removeNode).fail(function () {\r\n                        that._trigger('destroyfailed', null,data);\r\n                    });\r\n                } else {\r\n                    removeNode();\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n        _resetFinishedDeferreds: function () {\r\n            this._finishedUploads = [];\r\n        },\r\n\r\n        _addFinishedDeferreds: function (deferred) {\r\n            if (!deferred) {\r\n                deferred = $.Deferred();\r\n            }\r\n            this._finishedUploads.push(deferred);\r\n            return deferred;\r\n        },\r\n\r\n        _getFinishedDeferreds: function () {\r\n            return this._finishedUploads;\r\n        },\r\n\r\n        // Link handler, that allows to download files\r\n        // by drag & drop of the links to the desktop:\r\n        _enableDragToDesktop: function () {\r\n            var link = $(this),\r\n                url = link.prop('href'),\r\n                name = link.prop('download'),\r\n                type = 'application/octet-stream';\r\n            link.bind('dragstart', function (e) {\r\n                try {\r\n                    e.originalEvent.dataTransfer.setData(\r\n                        'DownloadURL',\r\n                        [type, name, url].join(':')\r\n                    );\r\n                } catch (ignore) {}\r\n            });\r\n        },\r\n\r\n        _formatFileSize: function (bytes) {\r\n            if (typeof bytes !== 'number') {\r\n                return '';\r\n            }\r\n            if (bytes >= 1000000000) {\r\n                return (bytes / 1000000000).toFixed(2) + ' GB';\r\n            }\r\n            if (bytes >= 1000000) {\r\n                return (bytes / 1000000).toFixed(2) + ' MB';\r\n            }\r\n            return (bytes / 1000).toFixed(2) + ' KB';\r\n        },\r\n\r\n        _formatBitrate: function (bits) {\r\n            if (typeof bits !== 'number') {\r\n                return '';\r\n            }\r\n            if (bits >= 1000000000) {\r\n                return (bits / 1000000000).toFixed(2) + ' Gbit/s';\r\n            }\r\n            if (bits >= 1000000) {\r\n                return (bits / 1000000).toFixed(2) + ' Mbit/s';\r\n            }\r\n            if (bits >= 1000) {\r\n                return (bits / 1000).toFixed(2) + ' kbit/s';\r\n            }\r\n            return bits.toFixed(2) + ' bit/s';\r\n        },\r\n\r\n        _formatTime: function (seconds) {\r\n            var date = new Date(seconds * 1000),\r\n                days = Math.floor(seconds / 86400);\r\n            days = days ? days + 'd ' : '';\r\n            return days +\r\n                ('0' + date.getUTCHours()).slice(-2) + ':' +\r\n                ('0' + date.getUTCMinutes()).slice(-2) + ':' +\r\n                ('0' + date.getUTCSeconds()).slice(-2);\r\n        },\r\n\r\n        _formatPercentage: function (floatValue) {\r\n            return (floatValue * 100).toFixed(2) + ' %';\r\n        },\r\n\r\n        _renderExtendedProgress: function (data) {\r\n            return this._formatBitrate(data.bitrate) + ' | ' +\r\n                this._formatTime(\r\n                    (data.total - data.loaded) * 8 / data.bitrate\r\n                ) + ' | ' +\r\n                this._formatPercentage(\r\n                    data.loaded / data.total\r\n                ) + ' | ' +\r\n                this._formatFileSize(data.loaded) + ' / ' +\r\n                this._formatFileSize(data.total);\r\n        },\r\n\r\n        _renderTemplate: function (func, files) {\r\n            if (!func) {\r\n                return $();\r\n            }\r\n            var result = func({\r\n                files: files,\r\n                formatFileSize: this._formatFileSize,\r\n                options: this.options\r\n            });\r\n            if (result instanceof $) {\r\n                return result;\r\n            }\r\n            return $(this.options.templatesContainer).html(result).children();\r\n        },\r\n\r\n        _renderPreviews: function (data) {\r\n            data.context.find('.preview').each(function (index, elm) {\r\n                $(elm).append(data.files[index].preview);\r\n            });\r\n        },\r\n\r\n        _renderUpload: function (files) {\r\n            return this._renderTemplate(\r\n                this.options.uploadTemplate,\r\n                files\r\n            );\r\n        },\r\n\r\n        _renderDownload: function (files) {\r\n            return this._renderTemplate(\r\n                this.options.downloadTemplate,\r\n                files\r\n            ).find('a[download]').each(this._enableDragToDesktop).end();\r\n        },\r\n\r\n        _startHandler: function (e) {\r\n            e.preventDefault();\r\n            var button = $(e.currentTarget),\r\n                template = button.closest('.template-upload'),\r\n                data = template.data('data');\r\n            button.prop('disabled', true);\r\n            if (data && data.submit) {\r\n                data.submit();\r\n            }\r\n        },\r\n\r\n        _cancelHandler: function (e) {\r\n            e.preventDefault();\r\n            var template = $(e.currentTarget)\r\n                    .closest('.template-upload,.template-download'),\r\n                data = template.data('data') || {};\r\n            data.context = data.context || template;\r\n            if (data.abort) {\r\n                data.abort();\r\n            } else {\r\n                data.errorThrown = 'abort';\r\n                this._trigger('fail', null,data);\r\n            }\r\n        },\r\n\r\n        _deleteHandler: function (e) {\r\n            e.preventDefault();\r\n            var button = $(e.currentTarget);\r\n            this._trigger('destroy', null, $.extend({\r\n                context: button.closest('.template-download'),\r\n                type: 'DELETE'\r\n            }, button.data()));\r\n        },\r\n\r\n        _forceReflow: function (node) {\r\n            return $.support.transition && node.length &&\r\n                node[0].offsetWidth;\r\n        },\r\n\r\n        _transition: function (node) {\r\n            var dfd = $.Deferred();\r\n            if ($.support.transition && node.hasClass('fade') && node.is(':visible')) {\r\n                node.bind(\r\n                    $.support.transition.end,\r\n                    function (e) {\r\n                        // Make sure we don't respond to other transitions events\r\n                        // in the container element, e.g. from button elements:\r\n                        if (e.target === node[0]) {\r\n                            node.unbind($.support.transition.end);\r\n                            dfd.resolveWith(node);\r\n                        }\r\n                    }\r\n                ).toggleClass('in');\r\n            } else {\r\n                node.toggleClass('in');\r\n                dfd.resolveWith(node);\r\n            }\r\n            return dfd;\r\n        },\r\n\r\n        _initButtonBarEventHandlers: function () {\r\n            var fileUploadButtonBar = this.element.find('.fileupload-buttonbar'),\r\n                filesList = this.options.filesContainer;\r\n            this._on(fileUploadButtonBar.find('.start'), {\r\n                click: function (e) {\r\n                    e.preventDefault();\r\n                    filesList.find('.start').click();\r\n                }\r\n            });\r\n            this._on(fileUploadButtonBar.find('.cancel'), {\r\n                click: function (e) {\r\n                    e.preventDefault();\r\n                    filesList.find('.cancel').click();\r\n                }\r\n            });\r\n            this._on(fileUploadButtonBar.find('.delete'), {\r\n                click: function (e) {\r\n                    e.preventDefault();\r\n                    filesList.find('.toggle:checked')\r\n                        .closest('.template-download')\r\n                        .find('.delete').click();\r\n                    fileUploadButtonBar.find('.toggle')\r\n                        .prop('checked', false);\r\n                }\r\n            });\r\n            this._on(fileUploadButtonBar.find('.toggle'), {\r\n                change: function (e) {\r\n                    filesList.find('.toggle').prop(\r\n                        'checked',\r\n                        $(e.currentTarget).is(':checked')\r\n                    );\r\n                }\r\n            });\r\n        },\r\n\r\n        _destroyButtonBarEventHandlers: function () {\r\n            this._off(\r\n                this.element.find('.fileupload-buttonbar')\r\n                    .find('.start, .cancel, .delete'),\r\n                'click'\r\n            );\r\n            this._off(\r\n                this.element.find('.fileupload-buttonbar .toggle'),\r\n                'change.'\r\n            );\r\n        },\r\n\r\n        _initEventHandlers: function () {\r\n            //this._super();\r\n            this._on(this.options.filesContainer, {\r\n                'click .start': this._startHandler,\r\n                'click .cancel': this._cancelHandler,\r\n                'click .delete': this._deleteHandler\r\n            });\r\n            this._initButtonBarEventHandlers();\r\n        },\r\n\r\n        _destroyEventHandlers: function () {\r\n            this._destroyButtonBarEventHandlers();\r\n            this._off(this.options.filesContainer, 'click');\r\n            this._super();\r\n        },\r\n\r\n        _enableFileInputButton: function () {\r\n            this.element.find('.fileinput-button input')\r\n                .prop('disabled', false)\r\n                .parent().removeClass('disabled');\r\n        },\r\n\r\n        _disableFileInputButton: function () {\r\n            this.element.find('.fileinput-button input')\r\n                .prop('disabled', true)\r\n                .parent().addClass('disabled');\r\n        },\r\n\r\n        _initTemplates: function () {\r\n            var options = this.options;\r\n            options.templatesContainer = this.document[0].createElement(\r\n                options.filesContainer.prop('nodeName')\r\n            );\r\n            if (tmpl) {\r\n                if (options.uploadTemplateId) {\r\n                    options.uploadTemplate = tmpl(options.uploadTemplateId);\r\n                }\r\n                if (options.downloadTemplateId) {\r\n                    options.downloadTemplate = tmpl(options.downloadTemplateId);\r\n                }\r\n            }\r\n        },\r\n\r\n        _initFilesContainer: function () {\r\n            var options = this.options;\r\n            if (options.filesContainer === undefined) {\r\n                options.filesContainer = this.element.find('.files');\r\n            } else if (!(options.filesContainer instanceof $)) {\r\n                options.filesContainer = $(options.filesContainer);\r\n            }\r\n        },\r\n\r\n        _initSpecialOptions: function () {\r\n            //this._super();\r\n            this._initFilesContainer();\r\n            this._initTemplates();\r\n        },\r\n\r\n        _create: function () {\r\n            this._super();\r\n\r\n            this._processing = 0;\r\n            this._processingQueue = $.Deferred().resolveWith(this)\r\n                .promise();\r\n\r\n\r\n            this._initSpecialOptions();\r\n            this._initEventHandlers();\r\n\r\n            $(this.element).fileupload(this.options);\r\n            this._resetFinishedDeferreds();\r\n            if (!$.support.fileInput) {\r\n                this._disableFileInputButton();\r\n            }\r\n        },\r\n\r\n        enable: function () {\r\n            var wasDisabled = false;\r\n            if (this.options.disabled) {\r\n                wasDisabled = true;\r\n            }\r\n            this._super();\r\n            if (wasDisabled) {\r\n                this.element.find('input, button').prop('disabled', false);\r\n                this._enableFileInputButton();\r\n            }\r\n        },\r\n\r\n        disable: function () {\r\n            if (!this.options.disabled) {\r\n                this.element.find('input, button').prop('disabled', true);\r\n                this._disableFileInputButton();\r\n            }\r\n            this._super();\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n});\r\n"]}