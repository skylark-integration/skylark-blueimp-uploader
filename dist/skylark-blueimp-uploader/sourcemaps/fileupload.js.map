{"version":3,"sources":["fileupload.js"],"names":["define","langx","eventer","filer","$","Deferred","widget","options","dropZone","document","pasteZone","picker","undefined","paramName","singleFileUploads","limitMultiFileUploads","limitMultiFileUploadSize","limitMultiFileUploadSizeOverhead","sequentialUploads","limitConcurrentUploads","postMessage","multipart","maxChunkSize","uploadedBytes","recalculateProgress","progressInterval","bitrateInterval","autoUpload","messages","i18n","message","context","this","toString","each","key","value","replace","formData","form","serializeArray","add","e","data","isDefaultPrevented","fileupload","option","process","done","submit","processData","contentType","cache","_specialOptions","_BitrateTimer","timestamp","Date","now","getTime","loaded","bitrate","getBitrate","interval","timeDiff","_getTotal","files","total","index","file","size","_initProgressObject","obj","progress","_progress","extend","_initResponseObject","prop","_response","hasOwnProperty","_onProgress","lengthComputable","_time","Math","floor","chunkSize","_bitrateTimer","_trigger","create","delegatedEvent","_getParamName","isArray","_getDeferredState","deferred","state","isResolved","isRejected","_enhancePromise","promise","success","error","fail","complete","always","_getXHRPromise","resolveOrReject","args","dfd","resolveWith","rejectWith","abort","_addConvenienceMethods","that","getPromise","resolveFunc","rejectFunc","_processQueue","pipe","errorThrown","arguments","jqXHR","_onSend","processing","response","_beforeSend","_active","_onDone","result","textStatus","_onFail","_onAlways","jqXHRorResult","jqXHRorError","_sending","url","dataType","xhrFields","upload","_onAdd","paramNameSet","paramNameSlice","fileSet","i","filesLength","length","limit","limitSize","overhead","batchSize","j","push","slice","originalFiles","element","newData","_initEventHandlers","dropzone","dropped","pastezone","pasted","multiple","picked","_destroyEventHandlers","_setOption","reinit","inArray","_super","_initSpecialOptions","_getRegExp","str","parts","split","modifiers","pop","shift","RegExp","join","_isRegExpOption","type","test","_create","_slots","_sequence","active","disabled","makeArray","send"],"mappings":"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","file":"../fileupload.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-filer\",\r\n    'skylark-jquery',\r\n    'skylark-jqueryui/widget'\r\n],function (langx,eventer,filer,$) {\r\n    'use strict';\r\n\r\n    var Deferred = langx.Deferred;\r\n\r\n\r\n    // The fileupload widget listens for change events on file input fields defined\r\n    // via fileInput setting and paste or drop events of the given dropZone.\r\n    // In addition to the default jQuery Widget methods, the fileupload widget\r\n    // exposes the \"add\" and \"send\" methods, to add or directly send files using\r\n    // the fileupload API.\r\n    // By default, files added via file input selection, paste, drag & drop or\r\n    // \"add\" method are uploaded immediately, but it is possible to override\r\n    // the \"add\" callback option to queue file uploads.\r\n    $.widget('blueimp.fileupload', {\r\n\r\n        options: {\r\n            // The drop target element(s), by the default the complete document.\r\n            // Set to null to disable drag & drop support:\r\n            dropZone: $(document),\r\n\r\n            // The paste target element(s), by the default the complete document.\r\n            // Set to null to disable paste support:\r\n            pasteZone: $(document),\r\n\r\n            // The file input field(s), that are listened to for change events.\r\n            // If undefined, it is set to the file input fields inside\r\n            // of the widget element on plugin initialization.\r\n            // Set to null to disable the change listener.\r\n            picker: undefined,\r\n\r\n\r\n            // The parameter name for the file form data (the request argument name).\r\n            // If undefined or empty, the name property of the file input field is\r\n            // used, or \"files[]\" if the file input name property is also empty,\r\n            // can be a string or an array of strings:\r\n            paramName: undefined,\r\n            \r\n            // By default, each file of a selection is uploaded using an individual\r\n            // request for XHR type uploads. Set to false to upload file\r\n            // selections in one request each:\r\n            singleFileUploads: true,\r\n            \r\n            // To limit the number of files uploaded with one XHR request,\r\n            // set the following option to an integer greater than 0:\r\n            limitMultiFileUploads: undefined,\r\n            \r\n            // The following option limits the number of files uploaded with one\r\n            // XHR request to keep the request size under or equal to the defined\r\n            // limit in bytes:\r\n            limitMultiFileUploadSize: undefined,\r\n\r\n            // Multipart file uploads add a number of bytes to each uploaded file,\r\n            // therefore the following option adds an overhead for each file used\r\n            // in the limitMultiFileUploadSize configuration:\r\n            limitMultiFileUploadSizeOverhead: 512,\r\n\r\n            // Set the following option to true to issue all file upload requests\r\n            // in a sequential order:\r\n            sequentialUploads: false,\r\n            \r\n            // To limit the number of concurrent uploads,\r\n            // set the following option to an integer greater than 0:\r\n            limitConcurrentUploads: undefined,\r\n\r\n            // Set the following option to the location of a postMessage window,\r\n            // to enable postMessage transport uploads:\r\n            postMessage: undefined,\r\n \r\n            // By default, XHR file uploads are sent as multipart/form-data.\r\n            // The iframe transport is always using multipart/form-data.\r\n            // Set to false to enable non-multipart XHR uploads:\r\n            multipart: true,\r\n \r\n            // To upload large files in smaller chunks, set the following option\r\n            // to a preferred maximum chunk size. If set to 0, null or undefined,\r\n            // or the browser does not support the required Blob API, files will\r\n            // be uploaded as a whole.\r\n            maxChunkSize: undefined,\r\n \r\n            // When a non-multipart upload or a chunked multipart upload has been\r\n            // aborted, this option can be used to resume the upload by setting\r\n            // it to the size of the already uploaded bytes. This option is most\r\n            // useful when modifying the options object inside of the \"add\" or\r\n            // \"send\" callbacks, as the options are cloned for each file upload.\r\n            uploadedBytes: undefined,\r\n \r\n            // By default, failed (abort or error) file uploads are removed from the\r\n            // global progress calculation. Set the following option to false to\r\n            // prevent recalculating the global progress data:\r\n            recalculateProgress: true,\r\n \r\n            // Interval in milliseconds to calculate and trigger progress events:\r\n            progressInterval: 100,\r\n \r\n            // Interval in milliseconds to calculate progress bitrate:\r\n            bitrateInterval: 500,\r\n \r\n            // By default, uploads are started automatically when adding files:\r\n            autoUpload: false,\r\n\r\n            // Error and info messages:\r\n            messages: {\r\n                uploadedBytes: 'Uploaded bytes exceed file size'\r\n            },\r\n\r\n            // Translation function, gets the message key to be translated\r\n            // and an object with context specific data as arguments:\r\n            i18n: function (message, context) {\r\n                message = this.messages[message] || message.toString();\r\n                if (context) {\r\n                    langx.each(context, function (key, value) {\r\n                        message = message.replace('{' + key + '}', value);\r\n                    });\r\n                }\r\n                return message;\r\n            },\r\n\r\n            // Additional form data to be sent along with the file uploads can be set\r\n            // using this option, which accepts an array of objects with name and\r\n            // value properties, a function returning such an array, a FormData\r\n            // object (for XHR file uploads), or a simple object.\r\n            // The form of the first fileInput is given as parameter to the function:\r\n            formData: function (form) {\r\n                return form.serializeArray();\r\n            },\r\n\r\n            // The add callback is invoked as soon as files are added to the fileupload\r\n            // widget (via file input selection, drag & drop, paste or add API call).\r\n            // If the singleFileUploads option is enabled, this callback will be\r\n            // called once for each file in the selection for XHR file uploads, else\r\n            // once for each file selection.\r\n            //\r\n            // The upload starts when the submit method is invoked on the data parameter.\r\n            // The data object contains a files property holding the added files\r\n            // and allows you to override plugin options as well as define ajax settings.\r\n            //\r\n            // Listeners for this callback can also be bound the following way:\r\n            // .bind('fileuploadadd', func);\r\n            //\r\n            // data.submit() returns a Promise object and allows to attach additional\r\n            // handlers using jQuery's Deferred callbacks:\r\n            // data.submit().done(func).fail(func).always(func);\r\n            add: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                if (data.autoUpload || (data.autoUpload !== false && $(this).fileupload(\"instance\").option('autoUpload') )) {\r\n                    data.process().done(function () {\r\n                        data.submit();\r\n                    });\r\n                }\r\n            },\r\n\r\n            // Other callbacks:\r\n\r\n            // Callback for the submit event of each file upload:\r\n            // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);\r\n\r\n            // Callback for the start of each file upload request:\r\n            // send: function (e, data) {}, // .bind('fileuploadsend', func);\r\n\r\n            // Callback for successful uploads:\r\n            // done: function (e, data) {}, // .bind('fileuploaddone', func);\r\n\r\n            // Callback for failed (abort or error) uploads:\r\n            // fail: function (e, data) {}, // .bind('fileuploadfail', func);\r\n\r\n            // Callback for completed (success, abort or error) requests:\r\n            // always: function (e, data) {}, // .bind('fileuploadalways', func);\r\n\r\n            // Callback for upload progress events:\r\n            // progress: function (e, data) {}, // .bind('fileuploadprogress', func);\r\n\r\n            // Callback for global upload progress events:\r\n            // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);\r\n\r\n            // Callback for uploads start, equivalent to the global ajaxStart event:\r\n            // start: function (e) {}, // .bind('fileuploadstart', func);\r\n\r\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\r\n            // stop: function (e) {}, // .bind('fileuploadstop', func);\r\n\r\n            // Callback for change events of the fileInput(s):\r\n            // change: function (e, data) {}, // .bind('fileuploadchange', func);\r\n\r\n            // Callback for paste events to the pasteZone(s):\r\n            // paste: function (e, data) {}, // .bind('fileuploadpaste', func);\r\n\r\n            // Callback for drop events of the dropZone(s):\r\n            // drop: function (e, data) {}, // .bind('fileuploaddrop', func);\r\n\r\n            // Callback for dragover events of the dropZone(s):\r\n            // dragover: function (e) {}, // .bind('fileuploaddragover', func);\r\n\r\n            // Callback for the start of each chunk upload request:\r\n            // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);\r\n\r\n            // Callback for successful chunk uploads:\r\n            // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);\r\n\r\n            // Callback for failed (abort or error) chunk uploads:\r\n            // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);\r\n\r\n            // Callback for completed (success, abort or error) chunk upload requests:\r\n            // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);\r\n\r\n            // The plugin options are used as settings object for the ajax calls.\r\n            // The following are jQuery ajax settings required for the file uploads:\r\n            processData: false,\r\n            contentType: false,\r\n            cache: false\r\n        },\r\n\r\n        // A list of options that require reinitializing event listeners and/or\r\n        // special initialization code:\r\n        _specialOptions: [\r\n            'picker',\r\n            'dropZone',\r\n            'pasteZone',\r\n            'multipart'\r\n        ],\r\n\r\n        _BitrateTimer: function () {\r\n            this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());\r\n            this.loaded = 0;\r\n            this.bitrate = 0;\r\n            this.getBitrate = function (now, loaded, interval) {\r\n                var timeDiff = now - this.timestamp;\r\n                if (!this.bitrate || !interval || timeDiff > interval) {\r\n                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\r\n                    this.loaded = loaded;\r\n                    this.timestamp = now;\r\n                }\r\n                return this.bitrate;\r\n            };\r\n        },\r\n\r\n        _getTotal: function (files) {\r\n            var total = 0;\r\n            langx.each(files, function (index, file) {\r\n                total += file.size || 1;\r\n            });\r\n            return total;\r\n        },\r\n\r\n        _initProgressObject: function (obj) {\r\n            var progress = {\r\n                loaded: 0,\r\n                total: 0,\r\n                bitrate: 0\r\n            };\r\n            if (obj._progress) {\r\n                langx.extend(obj._progress, progress);\r\n            } else {\r\n                obj._progress = progress;\r\n            }\r\n        },\r\n\r\n        _initResponseObject: function (obj) {\r\n            var prop;\r\n            if (obj._response) {\r\n                for (prop in obj._response) {\r\n                    if (obj._response.hasOwnProperty(prop)) {\r\n                        delete obj._response[prop];\r\n                    }\r\n                }\r\n            } else {\r\n                obj._response = {};\r\n            }\r\n        },\r\n\r\n        _onProgress: function (e, data) {\r\n            if (e.lengthComputable) {\r\n                var now = ((Date.now) ? Date.now() : (new Date()).getTime()),\r\n                    loaded;\r\n                if (data._time && data.progressInterval &&\r\n                        (now - data._time < data.progressInterval) &&\r\n                        e.loaded !== e.total) {\r\n                    return;\r\n                }\r\n                data._time = now;\r\n                loaded = Math.floor(\r\n                    e.loaded / e.total * (data.chunkSize || data._progress.total)\r\n                ) + (data.uploadedBytes || 0);\r\n                // Add the difference from the previously loaded state\r\n                // to the global loaded counter:\r\n                this._progress.loaded += (loaded - data._progress.loaded);\r\n                this._progress.bitrate = this._bitrateTimer.getBitrate(\r\n                    now,\r\n                    this._progress.loaded,\r\n                    data.bitrateInterval\r\n                );\r\n                data._progress.loaded = data.loaded = loaded;\r\n                data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(\r\n                    now,\r\n                    loaded,\r\n                    data.bitrateInterval\r\n                );\r\n                // Trigger a custom progress event with a total data property set\r\n                // to the file size(s) of the current upload and a loaded data\r\n                // property calculated accordingly:\r\n                this._trigger(\r\n                    'progress',\r\n                    eventer.create('progress', {delegatedEvent: e}),\r\n                    data\r\n                );\r\n                // Trigger a global progress event for all current file uploads,\r\n                // including ajax calls queued for sequential file uploads:\r\n                this._trigger(\r\n                    'progressall',\r\n                    eventer.create('progressall', {delegatedEvent: e}),\r\n                    this._progress\r\n                );\r\n            }\r\n        },\r\n\r\n        _getParamName: function (options) {\r\n            var picker = $(options.picker),\r\n                paramName = options.paramName;\r\n            //if (!paramName) {\r\n            //    paramName = [fileInput.prop('name') || 'files[]'];\r\n            // } else if (!langx.isArray(paramName)) {\r\n\r\n            if (!langx.isArray(paramName)) {\r\n                paramName = [paramName];\r\n            }\r\n            return paramName;\r\n        },\r\n\r\n\r\n        // jQuery 1.6 doesn't provide .state(),\r\n        // while jQuery 1.8+ removed .isRejected() and .isResolved():\r\n        _getDeferredState: function (deferred) {\r\n            if (deferred.state) {\r\n                return deferred.state();\r\n            }\r\n            if (deferred.isResolved()) {\r\n                return 'resolved';\r\n            }\r\n            if (deferred.isRejected()) {\r\n                return 'rejected';\r\n            }\r\n            return 'pending';\r\n        },\r\n\r\n        // Maps jqXHR callbacks to the equivalent\r\n        // methods of the given Promise object:\r\n        _enhancePromise: function (promise) {\r\n            promise.success = promise.done;\r\n            promise.error = promise.fail;\r\n            promise.complete = promise.always;\r\n            return promise;\r\n        },\r\n\r\n        // Creates and returns a Promise object enhanced with\r\n        // the jqXHR methods abort, success, error and complete:\r\n        _getXHRPromise: function (resolveOrReject, context, args) {\r\n            var dfd = new Deferred(),\r\n                promise = dfd.promise;\r\n            context = context || this.options.context || promise;\r\n            if (resolveOrReject === true) {\r\n                dfd.resolveWith(context, args);\r\n            } else if (resolveOrReject === false) {\r\n                dfd.rejectWith(context, args);\r\n            }\r\n            promise.abort = dfd.promise;\r\n            return this._enhancePromise(promise);\r\n        },\r\n\r\n        // Adds convenience methods to the data callback argument:\r\n        _addConvenienceMethods: function (e, data) {\r\n            var that = this,\r\n                getPromise = function (args) {\r\n                    return new Deferred().resolveWith(that, args).promise;\r\n                };\r\n            data.process = function (resolveFunc, rejectFunc) {\r\n                if (resolveFunc || rejectFunc) {\r\n                    data._processQueue = this._processQueue =\r\n                        (this._processQueue || getPromise([this])).pipe(\r\n                            function () {\r\n                                if (data.errorThrown) {\r\n                                    return new Deferred()\r\n                                        .rejectWith(that, [data]).promise;\r\n                                }\r\n                                return getPromise(arguments);\r\n                            }\r\n                        ).pipe(resolveFunc, rejectFunc);\r\n                }\r\n                return this._processQueue || getPromise([this]);\r\n            };\r\n            data.submit = function () {\r\n                if (this.state() !== 'pending') {\r\n                    data.jqXHR = this.jqXHR =\r\n                        (that._trigger(\r\n                            'submit',\r\n                            eventer.create('submit', {delegatedEvent: e}),\r\n                            this\r\n                        ) !== false) && that._onSend(e, this);\r\n                }\r\n                return this.jqXHR || that._getXHRPromise();\r\n            };\r\n            data.abort = function () {\r\n                if (this.jqXHR) {\r\n                    return this.jqXHR.abort();\r\n                }\r\n                this.errorThrown = 'abort';\r\n                that._trigger('fail', null, this);\r\n                return that._getXHRPromise(false);\r\n            };\r\n            data.state = function () {\r\n                if (this.jqXHR) {\r\n                    return that._getDeferredState(this.jqXHR);\r\n                }\r\n                if (this._processQueue) {\r\n                    return that._getDeferredState(this._processQueue);\r\n                }\r\n            };\r\n            data.processing = function () {\r\n                return !this.jqXHR && this._processQueue && that\r\n                    ._getDeferredState(this._processQueue) === 'pending';\r\n            };\r\n            data.progress = function () {\r\n                return this._progress;\r\n            };\r\n            data.response = function () {\r\n                return this._response;\r\n            };\r\n        },\r\n\r\n        _beforeSend: function (e, data) {\r\n            if (this._active === 0) {\r\n                // the start callback is triggered when an upload starts\r\n                // and no other uploads are currently running,\r\n                // equivalent to the global ajaxStart event:\r\n                this._trigger('start');\r\n                // Set timer for global bitrate progress calculation:\r\n                this._bitrateTimer = new this._BitrateTimer();\r\n                // Reset the global progress values:\r\n                this._progress.loaded = this._progress.total = 0;\r\n                this._progress.bitrate = 0;\r\n            }\r\n            // Make sure the container objects for the .response() and\r\n            // .progress() methods on the data object are available\r\n            // and reset to their initial state:\r\n            this._initResponseObject(data);\r\n            this._initProgressObject(data);\r\n            data._progress.loaded = data.loaded = data.uploadedBytes || 0;\r\n            data._progress.total = data.total = this._getTotal(data.files) || 1;\r\n            data._progress.bitrate = data.bitrate = 0;\r\n            this._active += 1;\r\n            // Initialize the global progress values:\r\n            this._progress.loaded += data.loaded;\r\n            this._progress.total += data.total;\r\n        },\r\n\r\n        _onDone: function (result, textStatus, jqXHR, options) {\r\n            var total = options._progress.total,\r\n                response = options._response;\r\n            if (options._progress.loaded < total) {\r\n                // Create a progress event if no final progress event\r\n                // with loaded equaling total has been triggered:\r\n                this._onProgress(eventer.create('progress', {\r\n                    lengthComputable: true,\r\n                    loaded: total,\r\n                    total: total\r\n                }), options);\r\n            }\r\n            response.result = options.result = result;\r\n            response.textStatus = options.textStatus = textStatus;\r\n            response.jqXHR = options.jqXHR = jqXHR;\r\n            this._trigger('done', null, options);\r\n        },\r\n\r\n        _onFail: function (jqXHR, textStatus, errorThrown, options) {\r\n            var response = options._response;\r\n            if (options.recalculateProgress) {\r\n                // Remove the failed (error or abort) file upload from\r\n                // the global progress calculation:\r\n                this._progress.loaded -= options._progress.loaded;\r\n                this._progress.total -= options._progress.total;\r\n            }\r\n            response.jqXHR = options.jqXHR = jqXHR;\r\n            response.textStatus = options.textStatus = textStatus;\r\n            response.errorThrown = options.errorThrown = errorThrown;\r\n            this._trigger('fail', null, options);\r\n        },\r\n\r\n        _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {\r\n            // jqXHRorResult, textStatus and jqXHRorError are added to the\r\n            // options object via done and fail callbacks\r\n            this._trigger('always', null, options);\r\n        },\r\n\r\n        _onSend: function (e, data) {\r\n            if (!data.submit) {\r\n                this._addConvenienceMethods(e, data);\r\n            }\r\n            var that = this,\r\n                jqXHR,\r\n                aborted,\r\n                slot,\r\n                pipe,\r\n                send = function () {\r\n                    that._sending += 1;\r\n                    data.url = that.options.url;\r\n                    data.dataType = that.options.dataType;\r\n                    data.xhrFields = that.options.xhrFields;\r\n\r\n                    jqXHR = filer.upload(data);\r\n\r\n                    jqXHR.progress(function(e){\r\n                        //var oe = e.originalEvent;\r\n                        // Make sure the progress event properties get copied over:\r\n                        //e.lengthComputable = oe.lengthComputable;\r\n                        //e.loaded = oe.loaded;\r\n                        //e.total = oe.total;\r\n                        that._onProgress(e, jqXHR.options);\r\n\r\n                    }).done(function (result, textStatus) {\r\n                        that._onDone(result, textStatus, jqXHR, jqXHR.options);\r\n                    }).fail(function (e, textStatus) {\r\n                        that._onFail(jqXHR, textStatus,e, jqXHR.options);\r\n                    }).always(function () {\r\n                        that._sending -= 1;\r\n                        that._active -= 1;\r\n                        that._trigger('stop');\r\n                    });\r\n                    return jqXHR;\r\n                };\r\n            this._beforeSend(e, data);\r\n\r\n            return send();\r\n        },\r\n        _onAdd: function (e, data) {\r\n            var that = this,\r\n                result = true,\r\n                options = langx.extend({}, this.options, data),\r\n                files = data.files,\r\n                filesLength = files.length,\r\n                limit = options.limitMultiFileUploads,\r\n                limitSize = options.limitMultiFileUploadSize,\r\n                overhead = options.limitMultiFileUploadSizeOverhead,\r\n                batchSize = 0,\r\n                paramName = this._getParamName(options),\r\n                paramNameSet,\r\n                paramNameSlice,\r\n                fileSet,\r\n                i,\r\n                j = 0;\r\n            if (limitSize && (!filesLength || files[0].size === undefined)) {\r\n                limitSize = undefined;\r\n            }\r\n            if (!(options.singleFileUploads || limit || limitSize)) {\r\n                fileSet = [files];\r\n                paramNameSet = [paramName];\r\n            } else if (!(options.singleFileUploads || limitSize) && limit) {\r\n                fileSet = [];\r\n                paramNameSet = [];\r\n                for (i = 0; i < filesLength; i += limit) {\r\n                    fileSet.push(files.slice(i, i + limit));\r\n                    paramNameSlice = paramName.slice(i, i + limit);\r\n                    if (!paramNameSlice.length) {\r\n                        paramNameSlice = paramName;\r\n                    }\r\n                    paramNameSet.push(paramNameSlice);\r\n                }\r\n            } else if (!options.singleFileUploads && limitSize) {\r\n                fileSet = [];\r\n                paramNameSet = [];\r\n                for (i = 0; i < filesLength; i = i + 1) {\r\n                    batchSize += files[i].size + overhead;\r\n                    if (i + 1 === filesLength ||\r\n                            ((batchSize + files[i + 1].size + overhead) > limitSize) ||\r\n                            (limit && i + 1 - j >= limit)) {\r\n                        fileSet.push(files.slice(j, i + 1));\r\n                        paramNameSlice = paramName.slice(j, i + 1);\r\n                        if (!paramNameSlice.length) {\r\n                            paramNameSlice = paramName;\r\n                        }\r\n                        paramNameSet.push(paramNameSlice);\r\n                        j = i + 1;\r\n                        batchSize = 0;\r\n                    }\r\n                }\r\n            } else {\r\n                paramNameSet = paramName;\r\n            }\r\n            data.originalFiles = files;\r\n            langx.each(fileSet || files, function (index, element) {\r\n                var newData = langx.extend({}, data);\r\n                newData.files = fileSet ? element : [element];\r\n                newData.paramName = paramNameSet[index];\r\n                that._initResponseObject(newData);\r\n                that._initProgressObject(newData);\r\n                that._addConvenienceMethods(e, newData);\r\n                result = that._trigger(\r\n                    'add',\r\n                    eventer.create('add', {delegatedEvent: e}),\r\n                    newData\r\n                );\r\n                return result;\r\n            });\r\n            return result;\r\n        },\r\n\r\n        _initEventHandlers: function () {\r\n            var that = this;\r\n\r\n            filer.dropzone(this.options.dropZone[0],{\r\n                dropped : function (files) {\r\n                    var data = {};\r\n                    data.files = files;\r\n                    that._onAdd(null, data);\r\n                }\r\n            });\r\n            filer.pastezone(this.options.pasteZone[0],{\r\n                pasted : function (files) {\r\n                    var data = {};\r\n                    data.files = files;\r\n                    that._onAdd(null, data);\r\n                }\r\n            });\r\n\r\n            filer.picker(this.options.picker[0],{\r\n                multiple: true,\r\n                picked : function (files) {\r\n                    var data = {};\r\n                    data.files = files;\r\n                    that._onAdd(null, data);\r\n                }\r\n            });\r\n        },\r\n\r\n        _destroyEventHandlers: function () {\r\n            //this._off(this.options.dropZone, 'dragover drop');\r\n            //this._off(this.options.pasteZone, 'paste');\r\n            //this._off(this.options.picker, 'change');\r\n        },\r\n\r\n        _setOption: function (key, value) {\r\n            var reinit = langx.inArray(key, this._specialOptions) !== -1;\r\n            if (reinit) {\r\n                this._destroyEventHandlers();\r\n            }\r\n            this._super(key, value);\r\n            if (reinit) {\r\n                this._initSpecialOptions();\r\n                this._initEventHandlers();\r\n            }\r\n        },\r\n\r\n        _initSpecialOptions: function () {\r\n            var options = this.options;\r\n            //if (options.fileInput === undefined) {\r\n            //    //options.fileInput = this.element.is('input[type=\"file\"]') ?\r\n            //    //        this.element : this.element.find('input[type=\"file\"]');\r\n            //    options.fileInput = this.element.find('.fileinput-button');\r\n            \r\n            if (options.picker) {\r\n                if (!(options.picker instanceof $)) {\r\n                    options.picker = $(options.picker);\r\n                }                \r\n            }\r\n\r\n            if (options.dropZone) {\r\n                if (!(options.dropZone instanceof $)) {\r\n                    options.dropZone = $(options.dropZone);\r\n                }\r\n            }\r\n\r\n            if (options.pasteZone) {\r\n                if (!(options.pasteZone instanceof $)) {\r\n                    options.pasteZone = $(options.pasteZone);\r\n                }                \r\n            }\r\n        },\r\n\r\n        _getRegExp: function (str) {\r\n            var parts = str.split('/'),\r\n                modifiers = parts.pop();\r\n            parts.shift();\r\n            return new RegExp(parts.join('/'), modifiers);\r\n        },\r\n\r\n        _isRegExpOption: function (key, value) {\r\n            return key !== 'url' && langx.type(value) === 'string' &&\r\n                /^\\/.*\\/[igm]{0,3}$/.test(value);\r\n        },\r\n\r\n        _create: function () {\r\n            this._initSpecialOptions();\r\n            this._slots = [];\r\n            this._sequence = this._getXHRPromise(true);\r\n            this._sending = this._active = 0;\r\n            this._initProgressObject(this);\r\n            this._initEventHandlers();\r\n        },\r\n\r\n        // This method is exposed to the widget API and allows to query\r\n        // the number of active uploads:\r\n        active: function () {\r\n            return this._active;\r\n        },\r\n\r\n        // This method is exposed to the widget API and allows to query\r\n        // the widget upload progress.\r\n        // It returns an object with loaded, total and bitrate properties\r\n        // for the running uploads:\r\n        progress: function () {\r\n            return this._progress;\r\n        },\r\n\r\n        // This method is exposed to the widget API and allows adding files\r\n        // using the fileupload API. The data parameter accepts an object which\r\n        // must have a files property and can contain additional options:\r\n        // .fileupload('add', {files: filesList});\r\n        add: function (data) {\r\n            var that = this;\r\n            if (!data || this.options.disabled) {\r\n                return;\r\n            }\r\n            data.files = langx.makeArray(data.files);\r\n            this._onAdd(null, data);\r\n        },\r\n\r\n        // This method is exposed to the widget API and allows sending files\r\n        // using the fileupload API. The data parameter accepts an object which\r\n        // must have a files or fileInput property and can contain additional options:\r\n        // .fileupload('send', {files: filesList});\r\n        // The method returns a Promise object for the file upload call.\r\n        send: function (data) {\r\n            if (data && !this.options.disabled) {\r\n                data.files = langx.makeArray(data.files);\r\n                if (data.files.length) {\r\n                    return this._onSend(null, data);\r\n                }\r\n            }\r\n            return this._getXHRPromise(false, data && data.context);\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n\r\n\r\n});\r\n"]}