{"version":3,"sources":["skylark-blueimp-uploader.js"],"names":[],"mappingsfile":"../skylark-blueimp-uploader.js","sourcesContent":["define('skylark-blueimp-uploader/tmpl',[\r\n    \"skylark-langx/langx\"\r\n],function (langx) {\r\n\r\n  'use strict'\r\n\r\n  var tmpl = function (str, data) {\r\n    var f = !/[^\\w\\-.:]/.test(str)\r\n      ? (tmpl.cache[str] = tmpl.cache[str] || tmpl(tmpl.load(str)))\r\n      : new Function( // eslint-disable-line no-new-func\r\n        tmpl.arg + ',tmpl',\r\n        'var _e=tmpl.encode' +\r\n            tmpl.helper +\r\n            \",_s='\" +\r\n            str.replace(tmpl.regexp, tmpl.func) +\r\n            \"';return _s;\"\r\n      )\r\n    return data\r\n      ? f(data, tmpl)\r\n      : function (data) {\r\n        return f(data, tmpl)\r\n      }\r\n  }\r\n  tmpl.cache = {}\r\n  tmpl.load = function (id) {\r\n    return document.getElementById(id).innerHTML\r\n  }\r\n  tmpl.regexp = /([\\s'\\\\])(?!(?:[^{]|\\{(?!%))*%\\})|(?:\\{%(=|#)([\\s\\S]+?)%\\})|(\\{%)|(%\\})/g\r\n  tmpl.func = function (s, p1, p2, p3, p4, p5) {\r\n    if (p1) {\r\n      // whitespace, quote and backspace in HTML context\r\n      return (\r\n        {\r\n          '\\n': '\\\\n',\r\n          '\\r': '\\\\r',\r\n          '\\t': '\\\\t',\r\n          ' ': ' '\r\n        }[p1] || '\\\\' + p1\r\n      )\r\n    }\r\n    if (p2) {\r\n      // interpolation: {%=prop%}, or unescaped: {%#prop%}\r\n      if (p2 === '=') {\r\n        return \"'+_e(\" + p3 + \")+'\"\r\n      }\r\n      return \"'+(\" + p3 + \"==null?'':\" + p3 + \")+'\"\r\n    }\r\n    if (p4) {\r\n      // evaluation start tag: {%\r\n      return \"';\"\r\n    }\r\n    if (p5) {\r\n      // evaluation end tag: %}\r\n      return \"_s+='\"\r\n    }\r\n  }\r\n  tmpl.encReg = /[<>&\"'\\x00]/g // eslint-disable-line no-control-regex\r\n  tmpl.encMap = {\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '&': '&amp;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#39;'\r\n  }\r\n  tmpl.encode = function (s) {\r\n    return (s == null ? '' : '' + s).replace(tmpl.encReg, function (c) {\r\n      return tmpl.encMap[c] || ''\r\n    })\r\n  }\r\n  tmpl.arg = 'o'\r\n  tmpl.helper =\r\n    \",print=function(s,e){_s+=e?(s==null?'':s):_e(s);}\" +\r\n    ',include=function(s,d){_s+=tmpl(s,d);}';\r\n\r\n\r\n  return tmpl;\r\n\r\n});\ndefine('skylark-blueimp-uploader/fileupload-ui',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-filer/uploader\",\r\n    \"skylark-jquery\",\r\n    \"./tmpl\"\r\n],function (langx,eventer,uploader,$,tmpl) {\r\n\r\n    'use strict';\r\n\r\n//    $.blueimp.fileupload.prototype._specialOptions.push(\r\n//        'filesContainer',\r\n//        'uploadTemplateId',\r\n//        'downloadTemplateId'\r\n//    );\r\n\r\n    // The UI version extends the file upload widget\r\n    // and adds complete user interface interaction:\r\n    $.widget('blueimp.fileuploadui',  {\r\n        processActions: {\r\n            /*\r\n            log: function (data, options) {\r\n                console[options.type](\r\n                    'Processing \"' + data.files[data.index].name + '\"'\r\n                );\r\n            }\r\n            */\r\n        },\r\n\r\n        _processFile: function (data, originalData) {\r\n            /*\r\n            var that = this,\r\n                dfd = $.Deferred().resolveWith(that, [data]),\r\n                chain = dfd.promise();\r\n            this._trigger('process', null, data);\r\n            $.each(data.processQueue, function (i, settings) {\r\n                var func = function (data) {\r\n                    if (originalData.errorThrown) {\r\n                        return $.Deferred()\r\n                                .rejectWith(that, [originalData]).promise();\r\n                    }\r\n                    return that.processActions[settings.action].call(\r\n                        that,\r\n                        data,\r\n                        settings\r\n                    );\r\n                };\r\n                chain = chain.pipe(func, settings.always && func);\r\n            });\r\n            chain\r\n                .done(function () {\r\n                    that._trigger('processdone', null, data);\r\n                    that._trigger('processalways', null, data);\r\n                })\r\n                .fail(function () {\r\n                    that._trigger('processfail', null, data);\r\n                    that._trigger('processalways', null, data);\r\n                });\r\n            return chain;\r\n            */\r\n            var langx = $.skylark.langx,\r\n                that = this;\r\n            var funcs = langx.map(data.processQueue,function(setting) {\r\n                var func = function (data) {\r\n                    return that.processActions[setting.action].call(\r\n                        that,\r\n                        data,\r\n                        setting\r\n                    );\r\n                };\r\n                return func;                \r\n            });\r\n            return langx.async.waterful(funcs,[data],that);\r\n        },\r\n\r\n        // Replaces the settings of each processQueue item that\r\n        // are strings starting with an \"@\", using the remaining\r\n        // substring as key for the option map,\r\n        // e.g. \"@autoUpload\" is replaced with options.autoUpload:\r\n        _transformProcessQueue: function (options) {\r\n            var processQueue = [];\r\n            $.each(options.processQueue, function () {\r\n                var settings = {},\r\n                    action = this.action,\r\n                    prefix = this.prefix === true ? action : this.prefix;\r\n                $.each(this, function (key, value) {\r\n                    if ($.type(value) === 'string' &&\r\n                            value.charAt(0) === '@') {\r\n                        settings[key] = options[\r\n                            value.slice(1) || (prefix ? prefix +\r\n                                key.charAt(0).toUpperCase() + key.slice(1) : key)\r\n                        ];\r\n                    } else {\r\n                        settings[key] = value;\r\n                    }\r\n\r\n                });\r\n                processQueue.push(settings);\r\n            });\r\n            options.processQueue = processQueue;\r\n        },\r\n\r\n        // Returns the number of files currently in the processsing queue:\r\n        processing: function () {\r\n            return this._processing;\r\n        },\r\n\r\n        // Processes the files given as files property of the data parameter,\r\n        // returns a Promise object that allows to bind callbacks:\r\n        process: function (data) {\r\n            var that = this,\r\n                options = $.extend({}, this.options, data);\r\n            if (options.processQueue && options.processQueue.length) {\r\n                this._transformProcessQueue(options);\r\n                if (this._processing === 0) {\r\n                    this._trigger('processstart');\r\n                }\r\n                $.each(data.files, function (index) {\r\n                    var opts = index ? $.extend({}, options) : options,\r\n                        func = function () {\r\n                            if (data.errorThrown) {\r\n                                return $.Deferred()\r\n                                        .rejectWith(that, [data]).promise();\r\n                            }\r\n                            return that._processFile(opts, data);\r\n                        };\r\n                    opts.index = index;\r\n                    that._processing += 1;\r\n                    that._processingQueue = that._processingQueue.pipe(func, func)\r\n                        .always(function () {\r\n                            that._processing -= 1;\r\n                            if (that._processing === 0) {\r\n                                that._trigger('processstop');\r\n                            }\r\n                        });\r\n                });\r\n            }\r\n            return this._processingQueue;\r\n        },\r\n\r\n\r\n        options: {\r\n            // The list of processing actions:\r\n            processQueue: [\r\n                /*\r\n                {\r\n                    action: 'log',\r\n                    type: 'debug'\r\n                }\r\n                */\r\n            ],\r\n\r\n\r\n\r\n            // By default, files added to the widget are uploaded as soon\r\n            // as the user clicks on the start buttons. To enable automatic\r\n            // uploads, set the following option to true:\r\n            autoUpload: false,\r\n            // The ID of the upload template:\r\n            uploadTemplateId: 'template-upload',\r\n            // The ID of the download template:\r\n            downloadTemplateId: 'template-download',\r\n            // The container for the list of files. If undefined, it is set to\r\n            // an element with class \"files\" inside of the widget element:\r\n            filesContainer: undefined,\r\n            // By default, files are appended to the files container.\r\n            // Set the following option to true, to prepend files instead:\r\n            prependFiles: false,\r\n            // The expected data type of the upload response, sets the dataType\r\n            // option of the $.ajax upload requests:\r\n            dataType: 'json',\r\n\r\n            // Function returning the current number of files,\r\n            // used by the maxNumberOfFiles validation:\r\n            getNumberOfFiles: function () {\r\n                return this.filesContainer.children()\r\n                    .not('.processing').length;\r\n            },\r\n\r\n            // Callback to retrieve the list of files from the server response:\r\n            getFilesFromResponse: function (data) {\r\n                if (data.result && $.isArray(data.result.files)) {\r\n                    return data.result.files;\r\n                }\r\n                return [];\r\n            },\r\n\r\n            // The add callback is invoked as soon as files are added to the fileupload\r\n            // widget (via file input selection, drag & drop or add API call).\r\n            // See the basic file upload widget for more information:\r\n            add: function (e, data) {\r\n                //if (e.isDefaultPrevented()) {\r\n                //    return false;\r\n                //}\r\n                var $this = $(this),\r\n                    that = $this.data('blueimp-fileuploadui') ||\r\n                        $this.data('fileupload'),\r\n                    options = that.options;\r\n                data.context = that._renderUpload(data.files)\r\n                    .data('data', data)\r\n                    .addClass('processing');\r\n                options.filesContainer[\r\n                    options.prependFiles ? 'prepend' : 'append'\r\n                ](data.context);\r\n                that._forceReflow(data.context);\r\n                that._transition(data.context);\r\n//                data.process(function () {\r\n//                    return $this.fileupload('process', data);\r\n//                }).always(function () {\r\n                $this.fileuploadui('process', data).always(function () {\r\n                    data.context.each(function (index) {\r\n                        $(this).find('.size').text(\r\n                            that._formatFileSize(data.files[index].size)\r\n                        );\r\n                    }).removeClass('processing');\r\n                    that._renderPreviews(data);\r\n                }).done(function () {\r\n                    data.context.find('.start').prop('disabled', false);\r\n                    if ((that._trigger('added', null,data) !== false) &&\r\n                            (options.autoUpload || data.autoUpload) &&\r\n                            data.autoUpload !== false) {\r\n                        data.submit();\r\n                    }\r\n                }).fail(function () {\r\n                    if (data.files.error) {\r\n                        data.context.each(function (index) {\r\n                            var error = data.files[index].error;\r\n                            if (error) {\r\n                                $(this).find('.error').text(error);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            },\r\n            // Callback for the start of each file upload request:\r\n            send: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload');\r\n                if (data.context && data.dataType &&\r\n                        data.dataType.substr(0, 6) === 'iframe') {\r\n                    // Iframe Transport does not support progress events.\r\n                    // In lack of an indeterminate progress bar, we set\r\n                    // the progress to 100%, showing the full animated bar:\r\n                    data.context\r\n                        .find('.progress').addClass(\r\n                            !$.support.transition && 'progress-animated'\r\n                        )\r\n                        .attr('aria-valuenow', 100)\r\n                        .children().first().css(\r\n                            'width',\r\n                            '100%'\r\n                        );\r\n                }\r\n                return that._trigger('sent', null,data);\r\n            },\r\n            // Callback for successful uploads:\r\n            done: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload'),\r\n                    getFilesFromResponse = data.getFilesFromResponse ||\r\n                        that.options.getFilesFromResponse,\r\n                    files = getFilesFromResponse(data),\r\n                    template,\r\n                    deferred;\r\n                if (data.context) {\r\n                    data.context.each(function (index) {\r\n                        var file = files[index] ||\r\n                                {error: 'Empty file upload result'};\r\n                        deferred = that._addFinishedDeferreds();\r\n                        that._transition($(this)).done(\r\n                            function () {\r\n                                var node = $(this);\r\n//                                template = that._renderDownload([file]);\r\n                                template = that._renderDownload([file])\r\n                                    .replaceAll(node);\r\n                                that._forceReflow(template);\r\n                                that._transition(template).done(\r\n                                    function () {\r\n                                        data.context = $(this);\r\n                                        that._trigger('completed', null,data);\r\n                                        that._trigger('finished', null,data);\r\n                                        deferred.resolve();\r\n                                    }\r\n                                );\r\n                            }\r\n                        );\r\n                    });\r\n                } else {\r\n                    template = that._renderDownload(files)[\r\n                        that.options.prependFiles ? 'prependTo' : 'appendTo'\r\n                    ](that.options.filesContainer);\r\n                    that._forceReflow(template);\r\n                    deferred = that._addFinishedDeferreds();\r\n                    that._transition(template).done(\r\n                        function () {\r\n                            data.context = $(this);\r\n                            that._trigger('completed', null,data);\r\n                            that._trigger('finished', null,data);\r\n                            deferred.resolve();\r\n                        }\r\n                    );\r\n                }\r\n            },\r\n            // Callback for failed (abort or error) uploads:\r\n            fail: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload'),\r\n                    template,\r\n                    deferred;\r\n                if (data.context) {\r\n                    data.context.each(function (index) {\r\n                        if (data.errorThrown !== 'abort') {\r\n                            var file = data.files[index];\r\n                            file.error = file.error || data.errorThrown ||\r\n                                true;\r\n                            deferred = that._addFinishedDeferreds();\r\n                            that._transition($(this)).done(\r\n                                function () {\r\n                                    var node = $(this);\r\n                                    template = that._renderDownload([file])\r\n                                        .replaceAll(node);\r\n                                    that._forceReflow(template);\r\n                                    that._transition(template).done(\r\n                                        function () {\r\n                                            data.context = $(this);\r\n                                            that._trigger('failed', null,data);\r\n                                            that._trigger('finished', null,data);\r\n                                            deferred.resolve();\r\n                                        }\r\n                                    );\r\n                                }\r\n                            );\r\n                        } else {\r\n                            deferred = that._addFinishedDeferreds();\r\n                            that._transition($(this)).done(\r\n                                function () {\r\n                                    $(this).remove();\r\n                                    that._trigger('failed', null,data);\r\n                                    that._trigger('finished', null,data);\r\n                                    deferred.resolve();\r\n                                }\r\n                            );\r\n                        }\r\n                    });\r\n                } else if (data.errorThrown !== 'abort') {\r\n                    data.context = that._renderUpload(data.files)[\r\n                        that.options.prependFiles ? 'prependTo' : 'appendTo'\r\n                    ](that.options.filesContainer)\r\n                        .data('data', data);\r\n                    that._forceReflow(data.context);\r\n                    deferred = that._addFinishedDeferreds();\r\n                    that._transition(data.context).done(\r\n                        function () {\r\n                            data.context = $(this);\r\n                            that._trigger('failed', null,data);\r\n                            that._trigger('finished', null,data);\r\n                            deferred.resolve();\r\n                        }\r\n                    );\r\n                } else {\r\n                    that._trigger('failed', null,data);\r\n                    that._trigger('finished', null,data);\r\n                    that._addFinishedDeferreds().resolve();\r\n                }\r\n            },\r\n            // Callback for upload progress events:\r\n            progress: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var progress = Math.floor(data.loaded / data.total * 100);\r\n                if (data.context) {\r\n                    data.context.each(function () {\r\n                        $(this).find('.progress')\r\n                            .attr('aria-valuenow', progress)\r\n                            .children().first().css(\r\n                                'width',\r\n                                progress + '%'\r\n                            );\r\n                    });\r\n                }\r\n            },\r\n            // Callback for global upload progress events:\r\n            progressall: function (e, data) {\r\n                //if (e.isDefaultPrevented()) {\r\n                //    return false;\r\n                //}\r\n                var $this = $(this),\r\n                    progress = Math.floor(data.loaded / data.total * 100),\r\n                    globalProgressNode = $this.find('.fileupload-progress'),\r\n                    extendedProgressNode = globalProgressNode\r\n                        .find('.progress-extended');\r\n                if (extendedProgressNode.length) {\r\n                    extendedProgressNode.html(\r\n                        ($this.data('blueimp-fileuploadui') || $this.data('fileupload'))\r\n                            ._renderExtendedProgress(data)\r\n                    );\r\n                }\r\n                globalProgressNode\r\n                    .find('.progress')\r\n                    .attr('aria-valuenow', progress)\r\n                    .children().first().css(\r\n                        'width',\r\n                        progress + '%'\r\n                    );\r\n            },\r\n            // Callback for uploads start, equivalent to the global ajaxStart event:\r\n            start: function (e) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload');\r\n                that._resetFinishedDeferreds();\r\n                that._transition($(this).find('.fileupload-progress')).done(\r\n                    function () {\r\n                        that._trigger('started', null);\r\n                    }\r\n                );\r\n            },\r\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\r\n            stop: function (e) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload'),\r\n                    deferred = that._addFinishedDeferreds();\r\n                $.when.apply($, that._getFinishedDeferreds())\r\n                    .done(function () {\r\n                        that._trigger('stopped', null);\r\n                    });\r\n                that._transition($(this).find('.fileupload-progress')).done(\r\n                    function () {\r\n                        $(this).find('.progress')\r\n                            .attr('aria-valuenow', '0')\r\n                            .children().first().css('width', '0%');\r\n                        $(this).find('.progress-extended').html('&nbsp;');\r\n                        deferred.resolve();\r\n                    }\r\n                );\r\n            },\r\n            processstart: function (e) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                $(this).addClass('fileupload-processing');\r\n            },\r\n            processstop: function (e) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                $(this).removeClass('fileupload-processing');\r\n            },\r\n            // Callback for file deletion:\r\n            destroy: function (e, data) {\r\n                //if (e.isDefaultPrevented()) {\r\n                //    return false;\r\n                //}\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload'),\r\n                    removeNode = function () {\r\n                        that._transition(data.context).done(\r\n                            function () {\r\n                                $(this).remove();\r\n                                that._trigger('destroyed', null,data);\r\n                            }\r\n                        );\r\n                    };\r\n                if (data.url) {\r\n                    data.dataType = data.dataType || that.options.dataType;\r\n                    $.ajax(data).done(removeNode).fail(function () {\r\n                        that._trigger('destroyfailed', null,data);\r\n                    });\r\n                } else {\r\n                    removeNode();\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n        _resetFinishedDeferreds: function () {\r\n            this._finishedUploads = [];\r\n        },\r\n\r\n        _addFinishedDeferreds: function (deferred) {\r\n            if (!deferred) {\r\n                deferred = $.Deferred();\r\n            }\r\n            this._finishedUploads.push(deferred);\r\n            return deferred;\r\n        },\r\n\r\n        _getFinishedDeferreds: function () {\r\n            return this._finishedUploads;\r\n        },\r\n\r\n        // Link handler, that allows to download files\r\n        // by drag & drop of the links to the desktop:\r\n        _enableDragToDesktop: function () {\r\n            var link = $(this),\r\n                url = link.prop('href'),\r\n                name = link.prop('download'),\r\n                type = 'application/octet-stream';\r\n            link.bind('dragstart', function (e) {\r\n                try {\r\n                    e.originalEvent.dataTransfer.setData(\r\n                        'DownloadURL',\r\n                        [type, name, url].join(':')\r\n                    );\r\n                } catch (ignore) {}\r\n            });\r\n        },\r\n\r\n        _formatFileSize: function (bytes) {\r\n            if (typeof bytes !== 'number') {\r\n                return '';\r\n            }\r\n            if (bytes >= 1000000000) {\r\n                return (bytes / 1000000000).toFixed(2) + ' GB';\r\n            }\r\n            if (bytes >= 1000000) {\r\n                return (bytes / 1000000).toFixed(2) + ' MB';\r\n            }\r\n            return (bytes / 1000).toFixed(2) + ' KB';\r\n        },\r\n\r\n        _formatBitrate: function (bits) {\r\n            if (typeof bits !== 'number') {\r\n                return '';\r\n            }\r\n            if (bits >= 1000000000) {\r\n                return (bits / 1000000000).toFixed(2) + ' Gbit/s';\r\n            }\r\n            if (bits >= 1000000) {\r\n                return (bits / 1000000).toFixed(2) + ' Mbit/s';\r\n            }\r\n            if (bits >= 1000) {\r\n                return (bits / 1000).toFixed(2) + ' kbit/s';\r\n            }\r\n            return bits.toFixed(2) + ' bit/s';\r\n        },\r\n\r\n        _formatTime: function (seconds) {\r\n            var date = new Date(seconds * 1000),\r\n                days = Math.floor(seconds / 86400);\r\n            days = days ? days + 'd ' : '';\r\n            return days +\r\n                ('0' + date.getUTCHours()).slice(-2) + ':' +\r\n                ('0' + date.getUTCMinutes()).slice(-2) + ':' +\r\n                ('0' + date.getUTCSeconds()).slice(-2);\r\n        },\r\n\r\n        _formatPercentage: function (floatValue) {\r\n            return (floatValue * 100).toFixed(2) + ' %';\r\n        },\r\n\r\n        _renderExtendedProgress: function (data) {\r\n            return this._formatBitrate(data.bitrate) + ' | ' +\r\n                this._formatTime(\r\n                    (data.total - data.loaded) * 8 / data.bitrate\r\n                ) + ' | ' +\r\n                this._formatPercentage(\r\n                    data.loaded / data.total\r\n                ) + ' | ' +\r\n                this._formatFileSize(data.loaded) + ' / ' +\r\n                this._formatFileSize(data.total);\r\n        },\r\n\r\n        _renderTemplate: function (func, files) {\r\n            if (!func) {\r\n                return $();\r\n            }\r\n            var result = func({\r\n                files: files,\r\n                formatFileSize: this._formatFileSize,\r\n                options: this.options\r\n            });\r\n            if (result instanceof $) {\r\n                return result;\r\n            }\r\n            return $(this.options.templatesContainer).html(result).children();\r\n        },\r\n\r\n        _renderPreviews: function (data) {\r\n            data.context.find('.preview').each(function (index, elm) {\r\n                $(elm).append(data.files[index].preview);\r\n            });\r\n        },\r\n\r\n        _renderUpload: function (files) {\r\n            return this._renderTemplate(\r\n                this.options.uploadTemplate,\r\n                files\r\n            );\r\n        },\r\n\r\n        _renderDownload: function (files) {\r\n            return this._renderTemplate(\r\n                this.options.downloadTemplate,\r\n                files\r\n            ).find('a[download]').each(this._enableDragToDesktop).end();\r\n        },\r\n\r\n        _startHandler: function (e) {\r\n            e.preventDefault();\r\n            var button = $(e.currentTarget),\r\n                template = button.closest('.template-upload'),\r\n                data = template.data('data');\r\n            button.prop('disabled', true);\r\n            if (data && data.submit) {\r\n                data.submit();\r\n            }\r\n        },\r\n\r\n        _cancelHandler: function (e) {\r\n            e.preventDefault();\r\n            var template = $(e.currentTarget)\r\n                    .closest('.template-upload,.template-download'),\r\n                data = template.data('data') || {};\r\n            data.context = data.context || template;\r\n            if (data.abort) {\r\n                data.abort();\r\n            } else {\r\n                data.errorThrown = 'abort';\r\n                this._trigger('fail', null,data);\r\n            }\r\n        },\r\n\r\n        _deleteHandler: function (e) {\r\n            e.preventDefault();\r\n            var button = $(e.currentTarget);\r\n            this._trigger('destroy', null, $.extend({\r\n                context: button.closest('.template-download'),\r\n                type: 'DELETE'\r\n            }, button.data()));\r\n        },\r\n\r\n        _forceReflow: function (node) {\r\n            return $.support.transition && node.length &&\r\n                node[0].offsetWidth;\r\n        },\r\n\r\n        _transition: function (node) {\r\n            var dfd = $.Deferred();\r\n            if ($.support.transition && node.hasClass('fade') && node.is(':visible')) {\r\n                node.bind(\r\n                    $.support.transition.end,\r\n                    function (e) {\r\n                        // Make sure we don't respond to other transitions events\r\n                        // in the container element, e.g. from button elements:\r\n                        if (e.target === node[0]) {\r\n                            node.unbind($.support.transition.end);\r\n                            dfd.resolveWith(node);\r\n                        }\r\n                    }\r\n                ).toggleClass('in');\r\n            } else {\r\n                node.toggleClass('in');\r\n                dfd.resolveWith(node);\r\n            }\r\n            return dfd;\r\n        },\r\n\r\n        _initButtonBarEventHandlers: function () {\r\n            var fileUploadButtonBar = this.element.find('.fileupload-buttonbar'),\r\n                filesList = this.options.filesContainer;\r\n            this._on(fileUploadButtonBar.find('.start'), {\r\n                click: function (e) {\r\n                    e.preventDefault();\r\n                    filesList.find('.start').click();\r\n                }\r\n            });\r\n            this._on(fileUploadButtonBar.find('.cancel'), {\r\n                click: function (e) {\r\n                    e.preventDefault();\r\n                    filesList.find('.cancel').click();\r\n                }\r\n            });\r\n            this._on(fileUploadButtonBar.find('.delete'), {\r\n                click: function (e) {\r\n                    e.preventDefault();\r\n                    filesList.find('.toggle:checked')\r\n                        .closest('.template-download')\r\n                        .find('.delete').click();\r\n                    fileUploadButtonBar.find('.toggle')\r\n                        .prop('checked', false);\r\n                }\r\n            });\r\n            this._on(fileUploadButtonBar.find('.toggle'), {\r\n                change: function (e) {\r\n                    filesList.find('.toggle').prop(\r\n                        'checked',\r\n                        $(e.currentTarget).is(':checked')\r\n                    );\r\n                }\r\n            });\r\n        },\r\n\r\n        _destroyButtonBarEventHandlers: function () {\r\n            this._off(\r\n                this.element.find('.fileupload-buttonbar')\r\n                    .find('.start, .cancel, .delete'),\r\n                'click'\r\n            );\r\n            this._off(\r\n                this.element.find('.fileupload-buttonbar .toggle'),\r\n                'change.'\r\n            );\r\n        },\r\n\r\n        _initEventHandlers: function () {\r\n            //this._super();\r\n            this._on(this.options.filesContainer, {\r\n                'click .start': this._startHandler,\r\n                'click .cancel': this._cancelHandler,\r\n                'click .delete': this._deleteHandler\r\n            });\r\n            this._initButtonBarEventHandlers();\r\n        },\r\n\r\n        _destroyEventHandlers: function () {\r\n            this._destroyButtonBarEventHandlers();\r\n            this._off(this.options.filesContainer, 'click');\r\n            this._super();\r\n        },\r\n\r\n        _enableFileInputButton: function () {\r\n            this.element.find('.fileinput-button input')\r\n                .prop('disabled', false)\r\n                .parent().removeClass('disabled');\r\n        },\r\n\r\n        _disableFileInputButton: function () {\r\n            this.element.find('.fileinput-button input')\r\n                .prop('disabled', true)\r\n                .parent().addClass('disabled');\r\n        },\r\n\r\n        _initTemplates: function () {\r\n            var options = this.options;\r\n            options.templatesContainer = this.document[0].createElement(\r\n                options.filesContainer.prop('nodeName')\r\n            );\r\n            if (tmpl) {\r\n                if (options.uploadTemplateId) {\r\n                    options.uploadTemplate = tmpl(options.uploadTemplateId);\r\n                }\r\n                if (options.downloadTemplateId) {\r\n                    options.downloadTemplate = tmpl(options.downloadTemplateId);\r\n                }\r\n            }\r\n        },\r\n\r\n        _initFilesContainer: function () {\r\n            var options = this.options;\r\n            if (options.filesContainer === undefined) {\r\n                options.filesContainer = this.element.find('.files');\r\n            } else if (!(options.filesContainer instanceof $)) {\r\n                options.filesContainer = $(options.filesContainer);\r\n            }\r\n        },\r\n\r\n        _initSpecialOptions: function () {\r\n            //this._super();\r\n            this._initFilesContainer();\r\n            this._initTemplates();\r\n        },\r\n\r\n        _create: function () {\r\n            this._super();\r\n\r\n            this._processing = 0;\r\n            this._processingQueue = $.Deferred().resolveWith(this)\r\n                .promise();\r\n\r\n\r\n            this._initSpecialOptions();\r\n            this._initEventHandlers();\r\n\r\n            //$(this.element).fileupload(this.options);\r\n            this._uploader = uploader(this.element,this.options);\r\n            this._resetFinishedDeferreds();\r\n            if (!$.support.fileInput) {\r\n                this._disableFileInputButton();\r\n            }\r\n        },\r\n\r\n        enable: function () {\r\n            var wasDisabled = false;\r\n            if (this.options.disabled) {\r\n                wasDisabled = true;\r\n            }\r\n            this._super();\r\n            if (wasDisabled) {\r\n                this.element.find('input, button').prop('disabled', false);\r\n                this._enableFileInputButton();\r\n            }\r\n        },\r\n\r\n        disable: function () {\r\n            if (!this.options.disabled) {\r\n                this.element.find('input, button').prop('disabled', true);\r\n                this._disableFileInputButton();\r\n            }\r\n            this._super();\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n});\r\n\ndefine('skylark-blueimp-uploader/addons/image',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-imagex\",\r\n    'skylark-jquery',\r\n    \"../fileupload-ui\"\r\n],function (langx,eventer,imagex,$) {\r\n    'use strict';\r\n\r\n    // Prepend to the default processQueue:\r\n    $.blueimp.fileuploadui.prototype.options.processQueue.unshift(\r\n        {\r\n            action: 'loadImageMetaData',\r\n            disableImageHead: '@',\r\n            disableExif: '@',\r\n            disableExifThumbnail: '@',\r\n            disableExifSub: '@',\r\n            disableExifGps: '@',\r\n            disabled: '@disableImageMetaDataLoad'\r\n        },\r\n        {\r\n            action: 'loadImage',\r\n            // Use the action as prefix for the \"@\" options:\r\n            prefix: true,\r\n            fileTypes: '@',\r\n            maxFileSize: '@',\r\n            noRevoke: '@',\r\n            disabled: '@disableImageLoad'\r\n        },\r\n        {\r\n            action: 'resizeImage',\r\n            // Use \"image\" as prefix for the \"@\" options:\r\n            prefix: 'image',\r\n            maxWidth: '@',\r\n            maxHeight: '@',\r\n            minWidth: '@',\r\n            minHeight: '@',\r\n            crop: '@',\r\n            orientation: '@',\r\n            forceResize: '@',\r\n            disabled: '@disableImageResize'\r\n        },\r\n        {\r\n            action: 'saveImage',\r\n            quality: '@imageQuality',\r\n            type: '@imageType',\r\n            disabled: '@disableImageResize'\r\n        },\r\n        {\r\n            action: 'saveImageMetaData',\r\n            disabled: '@disableImageMetaDataSave'\r\n        },\r\n        {\r\n            action: 'resizeImage',\r\n            // Use \"preview\" as prefix for the \"@\" options:\r\n            prefix: 'preview',\r\n            maxWidth: '@',\r\n            maxHeight: '@',\r\n            minWidth: '@',\r\n            minHeight: '@',\r\n            crop: '@',\r\n            orientation: '@',\r\n            thumbnail: '@',\r\n            canvas: '@',\r\n            disabled: '@disableImagePreview'\r\n        },\r\n        {\r\n            action: 'setImage',\r\n            name: '@imagePreviewName',\r\n            disabled: '@disableImagePreview'\r\n        },\r\n        {\r\n            action: 'deleteImageReferences',\r\n            disabled: '@disableImageReferencesDeletion'\r\n        }\r\n    );\r\n\r\n    // The File Upload Resize plugin extends the fileupload widget\r\n    // with image resize functionality:\r\n    $.widget('blueimp.fileuploadui', $.blueimp.fileuploadui, {\r\n\r\n        options: {\r\n            // The regular expression for the types of images to load:\r\n            // matched against the file type:\r\n            loadImageFileTypes: /^image\\/(gif|jpeg|png|svg\\+xml)$/,\r\n            // The maximum file size of images to load:\r\n            loadImageMaxFileSize: 10000000, // 10MB\r\n            // The maximum width of resized images:\r\n            imageMaxWidth: 1920,\r\n            // The maximum height of resized images:\r\n            imageMaxHeight: 1080,\r\n            // Defines the image orientation (1-8) or takes the orientation\r\n            // value from Exif data if set to true:\r\n            imageOrientation: false,\r\n            // Define if resized images should be cropped or only scaled:\r\n            imageCrop: false,\r\n            // Disable the resize image functionality by default:\r\n            disableImageResize: true,\r\n            // The maximum width of the preview images:\r\n            previewMaxWidth: 80,\r\n            // The maximum height of the preview images:\r\n            previewMaxHeight: 80,\r\n            // Defines the preview orientation (1-8) or takes the orientation\r\n            // value from Exif data if set to true:\r\n            previewOrientation: true,\r\n            // Create the preview using the Exif data thumbnail:\r\n            previewThumbnail: true,\r\n            // Define if preview images should be cropped or only scaled:\r\n            previewCrop: false,\r\n            // Define if preview images should be resized as canvas elements:\r\n            previewCanvas: true\r\n        },\r\n\r\n        processActions: {\r\n\r\n            // Loads the image given via data.files and data.index\r\n            // as img element, if the browser supports the File API.\r\n            // Accepts the options fileTypes (regular expression)\r\n            // and maxFileSize (integer) to limit the files to load:\r\n            loadImage: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var that = this,\r\n                    file = data.files[data.index],\r\n                    dfd = $.Deferred();\r\n                if (($.type(options.maxFileSize) === 'number' &&\r\n                            file.size > options.maxFileSize) ||\r\n                        (options.fileTypes &&\r\n                            !options.fileTypes.test(file.type)) ||\r\n                        !imagex.loadFile(\r\n                            file,\r\n                            function (img) {\r\n                                if (img.src) {\r\n                                    data.img = img;\r\n                                }\r\n                                dfd.resolveWith(that, [data]);\r\n                            },\r\n                            options\r\n                        )) {\r\n                    return data;\r\n                }\r\n                return dfd.promise();\r\n            },\r\n\r\n            // Resizes the image given as data.canvas or data.img\r\n            // and updates data.canvas or data.img with the resized image.\r\n            // Also stores the resized image as preview property.\r\n            // Accepts the options maxWidth, maxHeight, minWidth,\r\n            // minHeight, canvas and crop:\r\n            resizeImage: function (data, options) {\r\n                if (options.disabled || !(data.canvas || data.img)) {\r\n                    return data;\r\n                }\r\n                options = $.extend({canvas: true}, options);\r\n                var that = this,\r\n                    dfd = $.Deferred(),\r\n                    img = (options.canvas && data.canvas) || data.img,\r\n                    resolve = function (newImg) {\r\n                        if (newImg && (newImg.width !== img.width ||\r\n                                newImg.height !== img.height ||\r\n                                options.forceResize)) {\r\n                            data[newImg.getContext ? 'canvas' : 'img'] = newImg;\r\n                        }\r\n                        data.preview = newImg;\r\n                        dfd.resolveWith(that, [data]);\r\n                    },\r\n                    thumbnail;\r\n                if (data.exif) {\r\n                    if (options.orientation === true) {\r\n                        options.orientation = data.exif.get('Orientation');\r\n                    }\r\n                    if (options.thumbnail) {\r\n                        thumbnail = data.exif.get('Thumbnail');\r\n                        if (thumbnail) {\r\n                            imagex.loadFile(thumbnail, resolve, options);\r\n                            return dfd.promise();\r\n                        }\r\n                    }\r\n                    // Prevent orienting the same image twice:\r\n                    if (data.orientation) {\r\n                        delete options.orientation;\r\n                    } else {\r\n                        data.orientation = options.orientation;\r\n                    }\r\n                }\r\n                if (img) {\r\n                    resolve(imagex.scale(img, options));\r\n                    return dfd.promise();\r\n                }\r\n                return data;\r\n            },\r\n\r\n            // Saves the processed image given as data.canvas\r\n            // inplace at data.index of data.files:\r\n            saveImage: function (data, options) {\r\n                if (!data.canvas || options.disabled) {\r\n                    return data;\r\n                }\r\n                var that = this,\r\n                    file = data.files[data.index],\r\n                    dfd = $.Deferred();\r\n                if (data.canvas.toBlob) {\r\n                    data.canvas.toBlob(\r\n                        function (blob) {\r\n                            if (!blob.name) {\r\n                                if (file.type === blob.type) {\r\n                                    blob.name = file.name;\r\n                                } else if (file.name) {\r\n                                    blob.name = file.name.replace(\r\n                                        /\\..+$/,\r\n                                        '.' + blob.type.substr(6)\r\n                                    );\r\n                                }\r\n                            }\r\n                            // Don't restore invalid meta data:\r\n                            if (file.type !== blob.type) {\r\n                                delete data.imageHead;\r\n                            }\r\n                            // Store the created blob at the position\r\n                            // of the original file in the files list:\r\n                            data.files[data.index] = blob;\r\n                            dfd.resolveWith(that, [data]);\r\n                        },\r\n                        options.type || file.type,\r\n                        options.quality\r\n                    );\r\n                } else {\r\n                    return data;\r\n                }\r\n                return dfd.promise();\r\n            },\r\n\r\n            loadImageMetaData: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var that = this,\r\n                    dfd = $.Deferred();\r\n                imagex.meta.parseMetaData(data.files[data.index], function (result) {\r\n                    $.extend(data, result);\r\n                    dfd.resolveWith(that, [data,\"aaa\"]);\r\n                }, options);\r\n                return dfd.promise();\r\n            },\r\n\r\n            saveImageMetaData: function (data, options) {\r\n                if (!(data.imageHead && data.canvas &&\r\n                        data.canvas.toBlob && !options.disabled)) {\r\n                    return data;\r\n                }\r\n                var file = data.files[data.index],\r\n                    blob = new Blob([\r\n                        data.imageHead,\r\n                        // Resized images always have a head size of 20 bytes,\r\n                        // including the JPEG marker and a minimal JFIF header:\r\n                        this._blobSlice.call(file, 20)\r\n                    ], {type: file.type});\r\n                blob.name = file.name;\r\n                data.files[data.index] = blob;\r\n                return data;\r\n            },\r\n\r\n            // Sets the resized version of the image as a property of the\r\n            // file object, must be called after \"saveImage\":\r\n            setImage: function (data, options) {\r\n                if (data.preview && !options.disabled) {\r\n                    data.files[data.index][options.name || 'preview'] = data.preview;\r\n                }\r\n                return data;\r\n            },\r\n\r\n            deleteImageReferences: function (data, options) {\r\n                if (!options.disabled) {\r\n                    delete data.img;\r\n                    delete data.canvas;\r\n                    delete data.preview;\r\n                    delete data.imageHead;\r\n                }\r\n                return data;\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n});\r\n\ndefine('skylark-blueimp-uploader/addons/audio',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-imagex\",\r\n    'skylark-jquery',\r\n    \"../fileupload-ui\"\r\n],function (langx,eventer,imagex,$) {\r\n    'use strict';\r\n\r\n    // Prepend to the default processQueue:\r\n    $.blueimp.fileuploadui.prototype.options.processQueue.unshift(\r\n        {\r\n            action: 'loadAudio',\r\n            // Use the action as prefix for the \"@\" options:\r\n            prefix: true,\r\n            fileTypes: '@',\r\n            maxFileSize: '@',\r\n            disabled: '@disableAudioPreview'\r\n        },\r\n        {\r\n            action: 'setAudio',\r\n            name: '@audioPreviewName',\r\n            disabled: '@disableAudioPreview'\r\n        }\r\n    );\r\n\r\n    // The File Upload Audio Preview plugin extends the fileupload widget\r\n    // with audio preview functionality:\r\n    $.widget('blueimp.fileuploadui', $.blueimp.fileuploadui, {\r\n\r\n        options: {\r\n            // The regular expression for the types of audio files to load,\r\n            // matched against the file type:\r\n            loadAudioFileTypes: /^audio\\/.*$/\r\n        },\r\n\r\n        _audioElement: document.createElement('audio'),\r\n\r\n        processActions: {\r\n\r\n            // Loads the audio file given via data.files and data.index\r\n            // as audio element if the browser supports playing it.\r\n            // Accepts the options fileTypes (regular expression)\r\n            // and maxFileSize (integer) to limit the files to load:\r\n            loadAudio: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var file = data.files[data.index],\r\n                    url,\r\n                    audio;\r\n                if (this._audioElement.canPlayType &&\r\n                        this._audioElement.canPlayType(file.type) &&\r\n                        ($.type(options.maxFileSize) !== 'number' ||\r\n                            file.size <= options.maxFileSize) &&\r\n                        (!options.fileTypes ||\r\n                            options.fileTypes.test(file.type))) {\r\n                    url = imagex.createObjectURL(file);\r\n                    if (url) {\r\n                        audio = this._audioElement.cloneNode(false);\r\n                        audio.src = url;\r\n                        audio.controls = true;\r\n                        data.audio = audio;\r\n                        return data;\r\n                    }\r\n                }\r\n                return data;\r\n            },\r\n\r\n            // Sets the audio element as a property of the file object:\r\n            setAudio: function (data, options) {\r\n                if (data.audio && !options.disabled) {\r\n                    data.files[data.index][options.name || 'preview'] = data.audio;\r\n                }\r\n                return data;\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n\r\n});\r\n\ndefine('skylark-blueimp-uploader/addons/video',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-imagex\",\r\n    'skylark-jquery',\r\n    \"../fileupload-ui\"\r\n],function (langx,eventer,imagex,$) {\r\n    'use strict';\r\n\r\n    // Prepend to the default processQueue:\r\n    $.blueimp.fileuploadui.prototype.options.processQueue.unshift(\r\n        {\r\n            action: 'loadVideo',\r\n            // Use the action as prefix for the \"@\" options:\r\n            prefix: true,\r\n            fileTypes: '@',\r\n            maxFileSize: '@',\r\n            disabled: '@disableVideoPreview'\r\n        },\r\n        {\r\n            action: 'setVideo',\r\n            name: '@videoPreviewName',\r\n            disabled: '@disableVideoPreview'\r\n        }\r\n    );\r\n\r\n    // The File Upload Video Preview plugin extends the fileupload widget\r\n    // with video preview functionality:\r\n    $.widget('blueimp.fileuploadui', $.blueimp.fileuploadui, {\r\n\r\n        options: {\r\n            // The regular expression for the types of video files to load,\r\n            // matched against the file type:\r\n            loadVideoFileTypes: /^video\\/.*$/\r\n        },\r\n\r\n        _videoElement: document.createElement('video'),\r\n\r\n        processActions: {\r\n\r\n            // Loads the video file given via data.files and data.index\r\n            // as video element if the browser supports playing it.\r\n            // Accepts the options fileTypes (regular expression)\r\n            // and maxFileSize (integer) to limit the files to load:\r\n            loadVideo: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var file = data.files[data.index],\r\n                    url,\r\n                    video;\r\n                if (this._videoElement.canPlayType &&\r\n                        this._videoElement.canPlayType(file.type) &&\r\n                        ($.type(options.maxFileSize) !== 'number' ||\r\n                            file.size <= options.maxFileSize) &&\r\n                        (!options.fileTypes ||\r\n                            options.fileTypes.test(file.type))) {\r\n                    url = loadImage.createObjectURL(file);\r\n                    if (url) {\r\n                        video = this._videoElement.cloneNode(false);\r\n                        video.src = url;\r\n                        video.controls = true;\r\n                        data.video = video;\r\n                        return data;\r\n                    }\r\n                }\r\n                return data;\r\n            },\r\n\r\n            // Sets the video element as a property of the file object:\r\n            setVideo: function (data, options) {\r\n                if (data.video && !options.disabled) {\r\n                    data.files[data.index][options.name || 'preview'] = data.video;\r\n                }\r\n                return data;\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n\r\n});\r\n\ndefine('skylark-blueimp-uploader/addons/validate',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    'skylark-jquery',\r\n    \"../fileupload-ui\"\r\n],function (langx,eventer,$) {\r\n    'use strict';\r\n\r\n    // Append to the default processQueue:\r\n    $.blueimp.fileuploadui.prototype.options.processQueue.push(\r\n        {\r\n            action: 'validate',\r\n            // Always trigger this action,\r\n            // even if the previous action was rejected: \r\n            always: true,\r\n            // Options taken from the global options map:\r\n            acceptFileTypes: '@',\r\n            maxFileSize: '@',\r\n            minFileSize: '@',\r\n            maxNumberOfFiles: '@',\r\n            disabled: '@disableValidation'\r\n        }\r\n    );\r\n\r\n    // The File Upload Validation plugin extends the fileupload widget\r\n    // with file validation functionality:\r\n    $.widget('blueimp.fileuploadui', $.blueimp.fileuploadui, {\r\n\r\n        options: {\r\n            /*\r\n            // The regular expression for allowed file types, matches\r\n            // against either file type or file name:\r\n            acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\r\n            // The maximum allowed file size in bytes:\r\n            maxFileSize: 10000000, // 10 MB\r\n            // The minimum allowed file size in bytes:\r\n            minFileSize: undefined, // No minimal file size\r\n            // The limit of files to be uploaded:\r\n            maxNumberOfFiles: 10,\r\n            */\r\n\r\n            // Function returning the current number of files,\r\n            // has to be overriden for maxNumberOfFiles validation:\r\n            getNumberOfFiles: $.noop,\r\n\r\n            // Error and info messages:\r\n            messages: {\r\n                maxNumberOfFiles: 'Maximum number of files exceeded',\r\n                acceptFileTypes: 'File type not allowed',\r\n                maxFileSize: 'File is too large',\r\n                minFileSize: 'File is too small'\r\n            }\r\n        },\r\n\r\n        processActions: {\r\n\r\n            validate: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var dfd = $.Deferred(),\r\n                    settings = this.options,\r\n                    file = data.files[data.index],\r\n                    fileSize;\r\n                if (options.minFileSize || options.maxFileSize) {\r\n                    fileSize = file.size;\r\n                }\r\n                if ($.type(options.maxNumberOfFiles) === 'number' &&\r\n                        (settings.getNumberOfFiles() || 0) + data.files.length >\r\n                            options.maxNumberOfFiles) {\r\n                    file.error = settings.i18n('maxNumberOfFiles');\r\n                } else if (options.acceptFileTypes &&\r\n                        !(options.acceptFileTypes.test(file.type) ||\r\n                        options.acceptFileTypes.test(file.name))) {\r\n                    file.error = settings.i18n('acceptFileTypes');\r\n                } else if (fileSize > options.maxFileSize) {\r\n                    file.error = settings.i18n('maxFileSize');\r\n                } else if ($.type(fileSize) === 'number' &&\r\n                        fileSize < options.minFileSize) {\r\n                    file.error = settings.i18n('minFileSize');\r\n                } else {\r\n                    delete file.error;\r\n                }\r\n                if (file.error || data.files.error) {\r\n                    data.files.error = true;\r\n                    dfd.rejectWith(this, [data]);\r\n                } else {\r\n                    dfd.resolveWith(this, [data]);\r\n                }\r\n                return dfd.promise();\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n\r\n});\r\n\ndefine('skylark-blueimp-uploader/main',[\r\n\t\"./fileupload-ui\",\r\n\t\"./addons/image\",\r\n\t\"./addons/audio\",\r\n\t\"./addons/video\",\r\n\t\"./addons/validate\"\r\n],function($) {\r\n\treturn $;\r\n});\ndefine('skylark-blueimp-uploader', ['skylark-blueimp-uploader/main'], function (main) { return main; });\n\n"]}