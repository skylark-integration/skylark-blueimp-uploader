{"version":3,"sources":["skylark-blueimp-uploader.js"],"names":["define","langx","tmpl","str","data","f","test","Function","arg","helper","replace","regexp","func","cache","load","id","document","getElementById","innerHTML","s","p1","p2","p3","p4","p5","\n","\r","\t"," ","encReg","encMap","<",">","&","\"","'","encode","c","eventer","filer","$","Deferred","widget","options","dropZone","pasteZone","picker","undefined","paramName","singleFileUploads","limitMultiFileUploads","limitMultiFileUploadSize","limitMultiFileUploadSizeOverhead","sequentialUploads","limitConcurrentUploads","postMessage","multipart","maxChunkSize","uploadedBytes","recalculateProgress","progressInterval","bitrateInterval","autoUpload","messages","i18n","message","context","this","toString","each","key","value","formData","form","serializeArray","add","e","isDefaultPrevented","fileupload","option","process","done","submit","processData","contentType","_specialOptions","_BitrateTimer","timestamp","Date","now","getTime","loaded","bitrate","getBitrate","interval","timeDiff","_getTotal","files","total","index","file","size","_initProgressObject","obj","progress","_progress","extend","_initResponseObject","prop","_response","hasOwnProperty","_onProgress","lengthComputable","_time","Math","floor","chunkSize","_bitrateTimer","_trigger","create","delegatedEvent","_getParamName","isArray","_getDeferredState","deferred","state","isResolved","isRejected","_enhancePromise","promise","success","error","fail","complete","always","_getXHRPromise","resolveOrReject","args","dfd","resolveWith","rejectWith","abort","_addConvenienceMethods","that","getPromise","resolveFunc","rejectFunc","_processQueue","pipe","errorThrown","arguments","jqXHR","_onSend","processing","response","_beforeSend","_active","_onDone","result","textStatus","_onFail","_onAlways","jqXHRorResult","jqXHRorError","_sending","url","dataType","xhrFields","upload","_onAdd","paramNameSet","paramNameSlice","fileSet","i","filesLength","length","limit","limitSize","overhead","batchSize","j","push","slice","originalFiles","element","newData","_initEventHandlers","dropzone","dropped","pastezone","pasted","multiple","picked","_destroyEventHandlers","_setOption","reinit","inArray","_super","_initSpecialOptions","_getRegExp","parts","split","modifiers","pop","shift","RegExp","join","_isRegExpOption","type","_create","_slots","_sequence","active","disabled","makeArray","send","blueimp","prototype","processActions","_processFile","originalData","skylark","funcs","map","processQueue","setting","action","call","async","waterful","_transformProcessQueue","settings","prefix","charAt","toUpperCase","_processing","opts","_processingQueue","uploadTemplateId","downloadTemplateId","filesContainer","prependFiles","getNumberOfFiles","children","not","getFilesFromResponse","$this","_renderUpload","addClass","_forceReflow","_transition","fileuploadui","find","text","_formatFileSize","removeClass","_renderPreviews","substr","support","transition","attr","first","css","template","_addFinishedDeferreds","node","_renderDownload","replaceAll","resolve","remove","progressall","globalProgressNode","extendedProgressNode","html","_renderExtendedProgress","start","_resetFinishedDeferreds","stop","when","apply","_getFinishedDeferreds","processstart","processstop","destroy","removeNode","ajax","_finishedUploads","_enableDragToDesktop","link","name","bind","originalEvent","dataTransfer","setData","ignore","bytes","toFixed","_formatBitrate","bits","_formatTime","seconds","date","days","getUTCHours","getUTCMinutes","getUTCSeconds","_formatPercentage","floatValue","_renderTemplate","formatFileSize","templatesContainer","elm","append","preview","uploadTemplate","downloadTemplate","end","_startHandler","preventDefault","button","currentTarget","closest","_cancelHandler","_deleteHandler","offsetWidth","hasClass","is","target","unbind","toggleClass","_initButtonBarEventHandlers","fileUploadButtonBar","filesList","_on","click","change","_destroyButtonBarEventHandlers","_off","click .start","click .cancel","click .delete","_enableFileInputButton","parent","_disableFileInputButton","_initTemplates","createElement","_initFilesContainer","fileInput","enable","wasDisabled","disable","imagex","unshift","disableImageHead","disableExif","disableExifThumbnail","disableExifSub","disableExifGps","fileTypes","maxFileSize","noRevoke","maxWidth","maxHeight","minWidth","minHeight","crop","orientation","forceResize","quality","thumbnail","canvas","loadImageFileTypes","loadImageMaxFileSize","imageMaxWidth","imageMaxHeight","imageOrientation","imageCrop","disableImageResize","previewMaxWidth","previewMaxHeight","previewOrientation","previewThumbnail","previewCrop","previewCanvas","loadImage","loadFile","img","src","resizeImage","newImg","width","height","getContext","exif","get","scale","saveImage","toBlob","blob","imageHead","loadImageMetaData","meta","parseMetaData","saveImageMetaData","Blob","_blobSlice","setImage","deleteImageReferences","loadAudioFileTypes","_audioElement","loadAudio","audio","canPlayType","createObjectURL","cloneNode","controls","setAudio","loadVideoFileTypes","_videoElement","loadVideo","video","setVideo","acceptFileTypes","minFileSize","maxNumberOfFiles","noop","validate","fileSize","main"],"mappings":"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","file":"../skylark-blueimp-uploader.js","sourcesContent":["define('skylark-blueimp-uploader/tmpl',[\r\n    \"skylark-langx/langx\"\r\n],function (langx) {\r\n\r\n  'use strict'\r\n\r\n  var tmpl = function (str, data) {\r\n    var f = !/[^\\w\\-.:]/.test(str)\r\n      ? (tmpl.cache[str] = tmpl.cache[str] || tmpl(tmpl.load(str)))\r\n      : new Function( // eslint-disable-line no-new-func\r\n        tmpl.arg + ',tmpl',\r\n        'var _e=tmpl.encode' +\r\n            tmpl.helper +\r\n            \",_s='\" +\r\n            str.replace(tmpl.regexp, tmpl.func) +\r\n            \"';return _s;\"\r\n      )\r\n    return data\r\n      ? f(data, tmpl)\r\n      : function (data) {\r\n        return f(data, tmpl)\r\n      }\r\n  }\r\n  tmpl.cache = {}\r\n  tmpl.load = function (id) {\r\n    return document.getElementById(id).innerHTML\r\n  }\r\n  tmpl.regexp = /([\\s'\\\\])(?!(?:[^{]|\\{(?!%))*%\\})|(?:\\{%(=|#)([\\s\\S]+?)%\\})|(\\{%)|(%\\})/g\r\n  tmpl.func = function (s, p1, p2, p3, p4, p5) {\r\n    if (p1) {\r\n      // whitespace, quote and backspace in HTML context\r\n      return (\r\n        {\r\n          '\\n': '\\\\n',\r\n          '\\r': '\\\\r',\r\n          '\\t': '\\\\t',\r\n          ' ': ' '\r\n        }[p1] || '\\\\' + p1\r\n      )\r\n    }\r\n    if (p2) {\r\n      // interpolation: {%=prop%}, or unescaped: {%#prop%}\r\n      if (p2 === '=') {\r\n        return \"'+_e(\" + p3 + \")+'\"\r\n      }\r\n      return \"'+(\" + p3 + \"==null?'':\" + p3 + \")+'\"\r\n    }\r\n    if (p4) {\r\n      // evaluation start tag: {%\r\n      return \"';\"\r\n    }\r\n    if (p5) {\r\n      // evaluation end tag: %}\r\n      return \"_s+='\"\r\n    }\r\n  }\r\n  tmpl.encReg = /[<>&\"'\\x00]/g // eslint-disable-line no-control-regex\r\n  tmpl.encMap = {\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '&': '&amp;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#39;'\r\n  }\r\n  tmpl.encode = function (s) {\r\n    return (s == null ? '' : '' + s).replace(tmpl.encReg, function (c) {\r\n      return tmpl.encMap[c] || ''\r\n    })\r\n  }\r\n  tmpl.arg = 'o'\r\n  tmpl.helper =\r\n    \",print=function(s,e){_s+=e?(s==null?'':s):_e(s);}\" +\r\n    ',include=function(s,d){_s+=tmpl(s,d);}';\r\n\r\n\r\n  return tmpl;\r\n\r\n});\ndefine('skylark-blueimp-uploader/fileupload',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-filer\",\r\n    'skylark-jquery',\r\n    'skylark-jqueryui/widget'\r\n],function (langx,eventer,filer,$) {\r\n    'use strict';\r\n\r\n    var Deferred = langx.Deferred;\r\n\r\n\r\n    // The fileupload widget listens for change events on file input fields defined\r\n    // via fileInput setting and paste or drop events of the given dropZone.\r\n    // In addition to the default jQuery Widget methods, the fileupload widget\r\n    // exposes the \"add\" and \"send\" methods, to add or directly send files using\r\n    // the fileupload API.\r\n    // By default, files added via file input selection, paste, drag & drop or\r\n    // \"add\" method are uploaded immediately, but it is possible to override\r\n    // the \"add\" callback option to queue file uploads.\r\n    $.widget('blueimp.fileupload', {\r\n\r\n        options: {\r\n            // The drop target element(s), by the default the complete document.\r\n            // Set to null to disable drag & drop support:\r\n            dropZone: $(document),\r\n\r\n            // The paste target element(s), by the default the complete document.\r\n            // Set to null to disable paste support:\r\n            pasteZone: $(document),\r\n\r\n            // The file input field(s), that are listened to for change events.\r\n            // If undefined, it is set to the file input fields inside\r\n            // of the widget element on plugin initialization.\r\n            // Set to null to disable the change listener.\r\n            picker: undefined,\r\n\r\n\r\n            // The parameter name for the file form data (the request argument name).\r\n            // If undefined or empty, the name property of the file input field is\r\n            // used, or \"files[]\" if the file input name property is also empty,\r\n            // can be a string or an array of strings:\r\n            paramName: undefined,\r\n            \r\n            // By default, each file of a selection is uploaded using an individual\r\n            // request for XHR type uploads. Set to false to upload file\r\n            // selections in one request each:\r\n            singleFileUploads: true,\r\n            \r\n            // To limit the number of files uploaded with one XHR request,\r\n            // set the following option to an integer greater than 0:\r\n            limitMultiFileUploads: undefined,\r\n            \r\n            // The following option limits the number of files uploaded with one\r\n            // XHR request to keep the request size under or equal to the defined\r\n            // limit in bytes:\r\n            limitMultiFileUploadSize: undefined,\r\n\r\n            // Multipart file uploads add a number of bytes to each uploaded file,\r\n            // therefore the following option adds an overhead for each file used\r\n            // in the limitMultiFileUploadSize configuration:\r\n            limitMultiFileUploadSizeOverhead: 512,\r\n\r\n            // Set the following option to true to issue all file upload requests\r\n            // in a sequential order:\r\n            sequentialUploads: false,\r\n            \r\n            // To limit the number of concurrent uploads,\r\n            // set the following option to an integer greater than 0:\r\n            limitConcurrentUploads: undefined,\r\n\r\n            // Set the following option to the location of a postMessage window,\r\n            // to enable postMessage transport uploads:\r\n            postMessage: undefined,\r\n \r\n            // By default, XHR file uploads are sent as multipart/form-data.\r\n            // The iframe transport is always using multipart/form-data.\r\n            // Set to false to enable non-multipart XHR uploads:\r\n            multipart: true,\r\n \r\n            // To upload large files in smaller chunks, set the following option\r\n            // to a preferred maximum chunk size. If set to 0, null or undefined,\r\n            // or the browser does not support the required Blob API, files will\r\n            // be uploaded as a whole.\r\n            maxChunkSize: undefined,\r\n \r\n            // When a non-multipart upload or a chunked multipart upload has been\r\n            // aborted, this option can be used to resume the upload by setting\r\n            // it to the size of the already uploaded bytes. This option is most\r\n            // useful when modifying the options object inside of the \"add\" or\r\n            // \"send\" callbacks, as the options are cloned for each file upload.\r\n            uploadedBytes: undefined,\r\n \r\n            // By default, failed (abort or error) file uploads are removed from the\r\n            // global progress calculation. Set the following option to false to\r\n            // prevent recalculating the global progress data:\r\n            recalculateProgress: true,\r\n \r\n            // Interval in milliseconds to calculate and trigger progress events:\r\n            progressInterval: 100,\r\n \r\n            // Interval in milliseconds to calculate progress bitrate:\r\n            bitrateInterval: 500,\r\n \r\n            // By default, uploads are started automatically when adding files:\r\n            autoUpload: false,\r\n\r\n            // Error and info messages:\r\n            messages: {\r\n                uploadedBytes: 'Uploaded bytes exceed file size'\r\n            },\r\n\r\n            // Translation function, gets the message key to be translated\r\n            // and an object with context specific data as arguments:\r\n            i18n: function (message, context) {\r\n                message = this.messages[message] || message.toString();\r\n                if (context) {\r\n                    langx.each(context, function (key, value) {\r\n                        message = message.replace('{' + key + '}', value);\r\n                    });\r\n                }\r\n                return message;\r\n            },\r\n\r\n            // Additional form data to be sent along with the file uploads can be set\r\n            // using this option, which accepts an array of objects with name and\r\n            // value properties, a function returning such an array, a FormData\r\n            // object (for XHR file uploads), or a simple object.\r\n            // The form of the first fileInput is given as parameter to the function:\r\n            formData: function (form) {\r\n                return form.serializeArray();\r\n            },\r\n\r\n            // The add callback is invoked as soon as files are added to the fileupload\r\n            // widget (via file input selection, drag & drop, paste or add API call).\r\n            // If the singleFileUploads option is enabled, this callback will be\r\n            // called once for each file in the selection for XHR file uploads, else\r\n            // once for each file selection.\r\n            //\r\n            // The upload starts when the submit method is invoked on the data parameter.\r\n            // The data object contains a files property holding the added files\r\n            // and allows you to override plugin options as well as define ajax settings.\r\n            //\r\n            // Listeners for this callback can also be bound the following way:\r\n            // .bind('fileuploadadd', func);\r\n            //\r\n            // data.submit() returns a Promise object and allows to attach additional\r\n            // handlers using jQuery's Deferred callbacks:\r\n            // data.submit().done(func).fail(func).always(func);\r\n            add: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                if (data.autoUpload || (data.autoUpload !== false && $(this).fileupload(\"instance\").option('autoUpload') )) {\r\n                    data.process().done(function () {\r\n                        data.submit();\r\n                    });\r\n                }\r\n            },\r\n\r\n            // Other callbacks:\r\n\r\n            // Callback for the submit event of each file upload:\r\n            // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);\r\n\r\n            // Callback for the start of each file upload request:\r\n            // send: function (e, data) {}, // .bind('fileuploadsend', func);\r\n\r\n            // Callback for successful uploads:\r\n            // done: function (e, data) {}, // .bind('fileuploaddone', func);\r\n\r\n            // Callback for failed (abort or error) uploads:\r\n            // fail: function (e, data) {}, // .bind('fileuploadfail', func);\r\n\r\n            // Callback for completed (success, abort or error) requests:\r\n            // always: function (e, data) {}, // .bind('fileuploadalways', func);\r\n\r\n            // Callback for upload progress events:\r\n            // progress: function (e, data) {}, // .bind('fileuploadprogress', func);\r\n\r\n            // Callback for global upload progress events:\r\n            // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);\r\n\r\n            // Callback for uploads start, equivalent to the global ajaxStart event:\r\n            // start: function (e) {}, // .bind('fileuploadstart', func);\r\n\r\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\r\n            // stop: function (e) {}, // .bind('fileuploadstop', func);\r\n\r\n            // Callback for change events of the fileInput(s):\r\n            // change: function (e, data) {}, // .bind('fileuploadchange', func);\r\n\r\n            // Callback for paste events to the pasteZone(s):\r\n            // paste: function (e, data) {}, // .bind('fileuploadpaste', func);\r\n\r\n            // Callback for drop events of the dropZone(s):\r\n            // drop: function (e, data) {}, // .bind('fileuploaddrop', func);\r\n\r\n            // Callback for dragover events of the dropZone(s):\r\n            // dragover: function (e) {}, // .bind('fileuploaddragover', func);\r\n\r\n            // Callback for the start of each chunk upload request:\r\n            // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);\r\n\r\n            // Callback for successful chunk uploads:\r\n            // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);\r\n\r\n            // Callback for failed (abort or error) chunk uploads:\r\n            // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);\r\n\r\n            // Callback for completed (success, abort or error) chunk upload requests:\r\n            // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);\r\n\r\n            // The plugin options are used as settings object for the ajax calls.\r\n            // The following are jQuery ajax settings required for the file uploads:\r\n            processData: false,\r\n            contentType: false,\r\n            cache: false\r\n        },\r\n\r\n        // A list of options that require reinitializing event listeners and/or\r\n        // special initialization code:\r\n        _specialOptions: [\r\n            'picker',\r\n            'dropZone',\r\n            'pasteZone',\r\n            'multipart'\r\n        ],\r\n\r\n        _BitrateTimer: function () {\r\n            this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());\r\n            this.loaded = 0;\r\n            this.bitrate = 0;\r\n            this.getBitrate = function (now, loaded, interval) {\r\n                var timeDiff = now - this.timestamp;\r\n                if (!this.bitrate || !interval || timeDiff > interval) {\r\n                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\r\n                    this.loaded = loaded;\r\n                    this.timestamp = now;\r\n                }\r\n                return this.bitrate;\r\n            };\r\n        },\r\n\r\n        _getTotal: function (files) {\r\n            var total = 0;\r\n            langx.each(files, function (index, file) {\r\n                total += file.size || 1;\r\n            });\r\n            return total;\r\n        },\r\n\r\n        _initProgressObject: function (obj) {\r\n            var progress = {\r\n                loaded: 0,\r\n                total: 0,\r\n                bitrate: 0\r\n            };\r\n            if (obj._progress) {\r\n                langx.extend(obj._progress, progress);\r\n            } else {\r\n                obj._progress = progress;\r\n            }\r\n        },\r\n\r\n        _initResponseObject: function (obj) {\r\n            var prop;\r\n            if (obj._response) {\r\n                for (prop in obj._response) {\r\n                    if (obj._response.hasOwnProperty(prop)) {\r\n                        delete obj._response[prop];\r\n                    }\r\n                }\r\n            } else {\r\n                obj._response = {};\r\n            }\r\n        },\r\n\r\n        _onProgress: function (e, data) {\r\n            if (e.lengthComputable) {\r\n                var now = ((Date.now) ? Date.now() : (new Date()).getTime()),\r\n                    loaded;\r\n                if (data._time && data.progressInterval &&\r\n                        (now - data._time < data.progressInterval) &&\r\n                        e.loaded !== e.total) {\r\n                    return;\r\n                }\r\n                data._time = now;\r\n                loaded = Math.floor(\r\n                    e.loaded / e.total * (data.chunkSize || data._progress.total)\r\n                ) + (data.uploadedBytes || 0);\r\n                // Add the difference from the previously loaded state\r\n                // to the global loaded counter:\r\n                this._progress.loaded += (loaded - data._progress.loaded);\r\n                this._progress.bitrate = this._bitrateTimer.getBitrate(\r\n                    now,\r\n                    this._progress.loaded,\r\n                    data.bitrateInterval\r\n                );\r\n                data._progress.loaded = data.loaded = loaded;\r\n                data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(\r\n                    now,\r\n                    loaded,\r\n                    data.bitrateInterval\r\n                );\r\n                // Trigger a custom progress event with a total data property set\r\n                // to the file size(s) of the current upload and a loaded data\r\n                // property calculated accordingly:\r\n                this._trigger(\r\n                    'progress',\r\n                    eventer.create('progress', {delegatedEvent: e}),\r\n                    data\r\n                );\r\n                // Trigger a global progress event for all current file uploads,\r\n                // including ajax calls queued for sequential file uploads:\r\n                this._trigger(\r\n                    'progressall',\r\n                    eventer.create('progressall', {delegatedEvent: e}),\r\n                    this._progress\r\n                );\r\n            }\r\n        },\r\n\r\n        _getParamName: function (options) {\r\n            var picker = $(options.picker),\r\n                paramName = options.paramName;\r\n            //if (!paramName) {\r\n            //    paramName = [fileInput.prop('name') || 'files[]'];\r\n            // } else if (!langx.isArray(paramName)) {\r\n\r\n            if (!langx.isArray(paramName)) {\r\n                paramName = [paramName];\r\n            }\r\n            return paramName;\r\n        },\r\n\r\n\r\n        // jQuery 1.6 doesn't provide .state(),\r\n        // while jQuery 1.8+ removed .isRejected() and .isResolved():\r\n        _getDeferredState: function (deferred) {\r\n            if (deferred.state) {\r\n                return deferred.state();\r\n            }\r\n            if (deferred.isResolved()) {\r\n                return 'resolved';\r\n            }\r\n            if (deferred.isRejected()) {\r\n                return 'rejected';\r\n            }\r\n            return 'pending';\r\n        },\r\n\r\n        // Maps jqXHR callbacks to the equivalent\r\n        // methods of the given Promise object:\r\n        _enhancePromise: function (promise) {\r\n            promise.success = promise.done;\r\n            promise.error = promise.fail;\r\n            promise.complete = promise.always;\r\n            return promise;\r\n        },\r\n\r\n        // Creates and returns a Promise object enhanced with\r\n        // the jqXHR methods abort, success, error and complete:\r\n        _getXHRPromise: function (resolveOrReject, context, args) {\r\n            var dfd = new Deferred(),\r\n                promise = dfd.promise;\r\n            context = context || this.options.context || promise;\r\n            if (resolveOrReject === true) {\r\n                dfd.resolveWith(context, args);\r\n            } else if (resolveOrReject === false) {\r\n                dfd.rejectWith(context, args);\r\n            }\r\n            promise.abort = dfd.promise;\r\n            return this._enhancePromise(promise);\r\n        },\r\n\r\n        // Adds convenience methods to the data callback argument:\r\n        _addConvenienceMethods: function (e, data) {\r\n            var that = this,\r\n                getPromise = function (args) {\r\n                    return new Deferred().resolveWith(that, args).promise;\r\n                };\r\n            data.process = function (resolveFunc, rejectFunc) {\r\n                if (resolveFunc || rejectFunc) {\r\n                    data._processQueue = this._processQueue =\r\n                        (this._processQueue || getPromise([this])).pipe(\r\n                            function () {\r\n                                if (data.errorThrown) {\r\n                                    return new Deferred()\r\n                                        .rejectWith(that, [data]).promise;\r\n                                }\r\n                                return getPromise(arguments);\r\n                            }\r\n                        ).pipe(resolveFunc, rejectFunc);\r\n                }\r\n                return this._processQueue || getPromise([this]);\r\n            };\r\n            data.submit = function () {\r\n                if (this.state() !== 'pending') {\r\n                    data.jqXHR = this.jqXHR =\r\n                        (that._trigger(\r\n                            'submit',\r\n                            eventer.create('submit', {delegatedEvent: e}),\r\n                            this\r\n                        ) !== false) && that._onSend(e, this);\r\n                }\r\n                return this.jqXHR || that._getXHRPromise();\r\n            };\r\n            data.abort = function () {\r\n                if (this.jqXHR) {\r\n                    return this.jqXHR.abort();\r\n                }\r\n                this.errorThrown = 'abort';\r\n                that._trigger('fail', null, this);\r\n                return that._getXHRPromise(false);\r\n            };\r\n            data.state = function () {\r\n                if (this.jqXHR) {\r\n                    return that._getDeferredState(this.jqXHR);\r\n                }\r\n                if (this._processQueue) {\r\n                    return that._getDeferredState(this._processQueue);\r\n                }\r\n            };\r\n            data.processing = function () {\r\n                return !this.jqXHR && this._processQueue && that\r\n                    ._getDeferredState(this._processQueue) === 'pending';\r\n            };\r\n            data.progress = function () {\r\n                return this._progress;\r\n            };\r\n            data.response = function () {\r\n                return this._response;\r\n            };\r\n        },\r\n\r\n        _beforeSend: function (e, data) {\r\n            if (this._active === 0) {\r\n                // the start callback is triggered when an upload starts\r\n                // and no other uploads are currently running,\r\n                // equivalent to the global ajaxStart event:\r\n                this._trigger('start');\r\n                // Set timer for global bitrate progress calculation:\r\n                this._bitrateTimer = new this._BitrateTimer();\r\n                // Reset the global progress values:\r\n                this._progress.loaded = this._progress.total = 0;\r\n                this._progress.bitrate = 0;\r\n            }\r\n            // Make sure the container objects for the .response() and\r\n            // .progress() methods on the data object are available\r\n            // and reset to their initial state:\r\n            this._initResponseObject(data);\r\n            this._initProgressObject(data);\r\n            data._progress.loaded = data.loaded = data.uploadedBytes || 0;\r\n            data._progress.total = data.total = this._getTotal(data.files) || 1;\r\n            data._progress.bitrate = data.bitrate = 0;\r\n            this._active += 1;\r\n            // Initialize the global progress values:\r\n            this._progress.loaded += data.loaded;\r\n            this._progress.total += data.total;\r\n        },\r\n\r\n        _onDone: function (result, textStatus, jqXHR, options) {\r\n            var total = options._progress.total,\r\n                response = options._response;\r\n            if (options._progress.loaded < total) {\r\n                // Create a progress event if no final progress event\r\n                // with loaded equaling total has been triggered:\r\n                this._onProgress(eventer.create('progress', {\r\n                    lengthComputable: true,\r\n                    loaded: total,\r\n                    total: total\r\n                }), options);\r\n            }\r\n            response.result = options.result = result;\r\n            response.textStatus = options.textStatus = textStatus;\r\n            response.jqXHR = options.jqXHR = jqXHR;\r\n            this._trigger('done', null, options);\r\n        },\r\n\r\n        _onFail: function (jqXHR, textStatus, errorThrown, options) {\r\n            var response = options._response;\r\n            if (options.recalculateProgress) {\r\n                // Remove the failed (error or abort) file upload from\r\n                // the global progress calculation:\r\n                this._progress.loaded -= options._progress.loaded;\r\n                this._progress.total -= options._progress.total;\r\n            }\r\n            response.jqXHR = options.jqXHR = jqXHR;\r\n            response.textStatus = options.textStatus = textStatus;\r\n            response.errorThrown = options.errorThrown = errorThrown;\r\n            this._trigger('fail', null, options);\r\n        },\r\n\r\n        _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {\r\n            // jqXHRorResult, textStatus and jqXHRorError are added to the\r\n            // options object via done and fail callbacks\r\n            this._trigger('always', null, options);\r\n        },\r\n\r\n        _onSend: function (e, data) {\r\n            if (!data.submit) {\r\n                this._addConvenienceMethods(e, data);\r\n            }\r\n            var that = this,\r\n                jqXHR,\r\n                aborted,\r\n                slot,\r\n                pipe,\r\n                send = function () {\r\n                    that._sending += 1;\r\n                    data.url = that.options.url;\r\n                    data.dataType = that.options.dataType;\r\n                    data.xhrFields = that.options.xhrFields;\r\n\r\n                    jqXHR = filer.upload(data);\r\n\r\n                    jqXHR.progress(function(e){\r\n                        //var oe = e.originalEvent;\r\n                        // Make sure the progress event properties get copied over:\r\n                        //e.lengthComputable = oe.lengthComputable;\r\n                        //e.loaded = oe.loaded;\r\n                        //e.total = oe.total;\r\n                        that._onProgress(e, jqXHR.options);\r\n\r\n                    }).done(function (result, textStatus) {\r\n                        that._onDone(result, textStatus, jqXHR, jqXHR.options);\r\n                    }).fail(function (e, textStatus) {\r\n                        that._onFail(jqXHR, textStatus,e, jqXHR.options);\r\n                    }).always(function () {\r\n                        that._sending -= 1;\r\n                        that._active -= 1;\r\n                        that._trigger('stop');\r\n                    });\r\n                    return jqXHR;\r\n                };\r\n            this._beforeSend(e, data);\r\n\r\n            return send();\r\n        },\r\n        _onAdd: function (e, data) {\r\n            var that = this,\r\n                result = true,\r\n                options = langx.extend({}, this.options, data),\r\n                files = data.files,\r\n                filesLength = files.length,\r\n                limit = options.limitMultiFileUploads,\r\n                limitSize = options.limitMultiFileUploadSize,\r\n                overhead = options.limitMultiFileUploadSizeOverhead,\r\n                batchSize = 0,\r\n                paramName = this._getParamName(options),\r\n                paramNameSet,\r\n                paramNameSlice,\r\n                fileSet,\r\n                i,\r\n                j = 0;\r\n            if (limitSize && (!filesLength || files[0].size === undefined)) {\r\n                limitSize = undefined;\r\n            }\r\n            if (!(options.singleFileUploads || limit || limitSize)) {\r\n                fileSet = [files];\r\n                paramNameSet = [paramName];\r\n            } else if (!(options.singleFileUploads || limitSize) && limit) {\r\n                fileSet = [];\r\n                paramNameSet = [];\r\n                for (i = 0; i < filesLength; i += limit) {\r\n                    fileSet.push(files.slice(i, i + limit));\r\n                    paramNameSlice = paramName.slice(i, i + limit);\r\n                    if (!paramNameSlice.length) {\r\n                        paramNameSlice = paramName;\r\n                    }\r\n                    paramNameSet.push(paramNameSlice);\r\n                }\r\n            } else if (!options.singleFileUploads && limitSize) {\r\n                fileSet = [];\r\n                paramNameSet = [];\r\n                for (i = 0; i < filesLength; i = i + 1) {\r\n                    batchSize += files[i].size + overhead;\r\n                    if (i + 1 === filesLength ||\r\n                            ((batchSize + files[i + 1].size + overhead) > limitSize) ||\r\n                            (limit && i + 1 - j >= limit)) {\r\n                        fileSet.push(files.slice(j, i + 1));\r\n                        paramNameSlice = paramName.slice(j, i + 1);\r\n                        if (!paramNameSlice.length) {\r\n                            paramNameSlice = paramName;\r\n                        }\r\n                        paramNameSet.push(paramNameSlice);\r\n                        j = i + 1;\r\n                        batchSize = 0;\r\n                    }\r\n                }\r\n            } else {\r\n                paramNameSet = paramName;\r\n            }\r\n            data.originalFiles = files;\r\n            langx.each(fileSet || files, function (index, element) {\r\n                var newData = langx.extend({}, data);\r\n                newData.files = fileSet ? element : [element];\r\n                newData.paramName = paramNameSet[index];\r\n                that._initResponseObject(newData);\r\n                that._initProgressObject(newData);\r\n                that._addConvenienceMethods(e, newData);\r\n                result = that._trigger(\r\n                    'add',\r\n                    eventer.create('add', {delegatedEvent: e}),\r\n                    newData\r\n                );\r\n                return result;\r\n            });\r\n            return result;\r\n        },\r\n\r\n        _initEventHandlers: function () {\r\n            var that = this;\r\n\r\n            filer.dropzone(this.options.dropZone[0],{\r\n                dropped : function (files) {\r\n                    var data = {};\r\n                    data.files = files;\r\n                    that._onAdd(null, data);\r\n                }\r\n            });\r\n            filer.pastezone(this.options.pasteZone[0],{\r\n                pasted : function (files) {\r\n                    var data = {};\r\n                    data.files = files;\r\n                    that._onAdd(null, data);\r\n                }\r\n            });\r\n\r\n            filer.picker(this.options.picker[0],{\r\n                multiple: true,\r\n                picked : function (files) {\r\n                    var data = {};\r\n                    data.files = files;\r\n                    that._onAdd(null, data);\r\n                }\r\n            });\r\n        },\r\n\r\n        _destroyEventHandlers: function () {\r\n            //this._off(this.options.dropZone, 'dragover drop');\r\n            //this._off(this.options.pasteZone, 'paste');\r\n            //this._off(this.options.picker, 'change');\r\n        },\r\n\r\n        _setOption: function (key, value) {\r\n            var reinit = langx.inArray(key, this._specialOptions) !== -1;\r\n            if (reinit) {\r\n                this._destroyEventHandlers();\r\n            }\r\n            this._super(key, value);\r\n            if (reinit) {\r\n                this._initSpecialOptions();\r\n                this._initEventHandlers();\r\n            }\r\n        },\r\n\r\n        _initSpecialOptions: function () {\r\n            var options = this.options;\r\n            //if (options.fileInput === undefined) {\r\n            //    //options.fileInput = this.element.is('input[type=\"file\"]') ?\r\n            //    //        this.element : this.element.find('input[type=\"file\"]');\r\n            //    options.fileInput = this.element.find('.fileinput-button');\r\n            \r\n            if (options.picker) {\r\n                if (!(options.picker instanceof $)) {\r\n                    options.picker = $(options.picker);\r\n                }                \r\n            }\r\n\r\n            if (options.dropZone) {\r\n                if (!(options.dropZone instanceof $)) {\r\n                    options.dropZone = $(options.dropZone);\r\n                }\r\n            }\r\n\r\n            if (options.pasteZone) {\r\n                if (!(options.pasteZone instanceof $)) {\r\n                    options.pasteZone = $(options.pasteZone);\r\n                }                \r\n            }\r\n        },\r\n\r\n        _getRegExp: function (str) {\r\n            var parts = str.split('/'),\r\n                modifiers = parts.pop();\r\n            parts.shift();\r\n            return new RegExp(parts.join('/'), modifiers);\r\n        },\r\n\r\n        _isRegExpOption: function (key, value) {\r\n            return key !== 'url' && langx.type(value) === 'string' &&\r\n                /^\\/.*\\/[igm]{0,3}$/.test(value);\r\n        },\r\n\r\n        _create: function () {\r\n            this._initSpecialOptions();\r\n            this._slots = [];\r\n            this._sequence = this._getXHRPromise(true);\r\n            this._sending = this._active = 0;\r\n            this._initProgressObject(this);\r\n            this._initEventHandlers();\r\n        },\r\n\r\n        // This method is exposed to the widget API and allows to query\r\n        // the number of active uploads:\r\n        active: function () {\r\n            return this._active;\r\n        },\r\n\r\n        // This method is exposed to the widget API and allows to query\r\n        // the widget upload progress.\r\n        // It returns an object with loaded, total and bitrate properties\r\n        // for the running uploads:\r\n        progress: function () {\r\n            return this._progress;\r\n        },\r\n\r\n        // This method is exposed to the widget API and allows adding files\r\n        // using the fileupload API. The data parameter accepts an object which\r\n        // must have a files property and can contain additional options:\r\n        // .fileupload('add', {files: filesList});\r\n        add: function (data) {\r\n            var that = this;\r\n            if (!data || this.options.disabled) {\r\n                return;\r\n            }\r\n            data.files = langx.makeArray(data.files);\r\n            this._onAdd(null, data);\r\n        },\r\n\r\n        // This method is exposed to the widget API and allows sending files\r\n        // using the fileupload API. The data parameter accepts an object which\r\n        // must have a files or fileInput property and can contain additional options:\r\n        // .fileupload('send', {files: filesList});\r\n        // The method returns a Promise object for the file upload call.\r\n        send: function (data) {\r\n            if (data && !this.options.disabled) {\r\n                data.files = langx.makeArray(data.files);\r\n                if (data.files.length) {\r\n                    return this._onSend(null, data);\r\n                }\r\n            }\r\n            return this._getXHRPromise(false, data && data.context);\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n\r\n\r\n});\r\n\ndefine('skylark-blueimp-uploader/fileupload-ui',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-jquery\",\r\n    \"./tmpl\",\r\n    \"./fileupload\"\r\n],function (langx,eventer,$,tmpl) {\r\n\r\n    'use strict';\r\n\r\n    $.blueimp.fileupload.prototype._specialOptions.push(\r\n        'filesContainer',\r\n        'uploadTemplateId',\r\n        'downloadTemplateId'\r\n    );\r\n\r\n    // The UI version extends the file upload widget\r\n    // and adds complete user interface interaction:\r\n    $.widget('blueimp.fileuploadui',  {\r\n        processActions: {\r\n            /*\r\n            log: function (data, options) {\r\n                console[options.type](\r\n                    'Processing \"' + data.files[data.index].name + '\"'\r\n                );\r\n            }\r\n            */\r\n        },\r\n\r\n        _processFile: function (data, originalData) {\r\n            /*\r\n            var that = this,\r\n                dfd = $.Deferred().resolveWith(that, [data]),\r\n                chain = dfd.promise();\r\n            this._trigger('process', null, data);\r\n            $.each(data.processQueue, function (i, settings) {\r\n                var func = function (data) {\r\n                    if (originalData.errorThrown) {\r\n                        return $.Deferred()\r\n                                .rejectWith(that, [originalData]).promise();\r\n                    }\r\n                    return that.processActions[settings.action].call(\r\n                        that,\r\n                        data,\r\n                        settings\r\n                    );\r\n                };\r\n                chain = chain.pipe(func, settings.always && func);\r\n            });\r\n            chain\r\n                .done(function () {\r\n                    that._trigger('processdone', null, data);\r\n                    that._trigger('processalways', null, data);\r\n                })\r\n                .fail(function () {\r\n                    that._trigger('processfail', null, data);\r\n                    that._trigger('processalways', null, data);\r\n                });\r\n            return chain;\r\n            */\r\n            var langx = $.skylark.langx,\r\n                that = this;\r\n            var funcs = langx.map(data.processQueue,function(setting) {\r\n                var func = function (data) {\r\n                    return that.processActions[setting.action].call(\r\n                        that,\r\n                        data,\r\n                        setting\r\n                    );\r\n                };\r\n                return func;                \r\n            });\r\n            return langx.async.waterful(funcs,[data],that);\r\n        },\r\n\r\n        // Replaces the settings of each processQueue item that\r\n        // are strings starting with an \"@\", using the remaining\r\n        // substring as key for the option map,\r\n        // e.g. \"@autoUpload\" is replaced with options.autoUpload:\r\n        _transformProcessQueue: function (options) {\r\n            var processQueue = [];\r\n            $.each(options.processQueue, function () {\r\n                var settings = {},\r\n                    action = this.action,\r\n                    prefix = this.prefix === true ? action : this.prefix;\r\n                $.each(this, function (key, value) {\r\n                    if ($.type(value) === 'string' &&\r\n                            value.charAt(0) === '@') {\r\n                        settings[key] = options[\r\n                            value.slice(1) || (prefix ? prefix +\r\n                                key.charAt(0).toUpperCase() + key.slice(1) : key)\r\n                        ];\r\n                    } else {\r\n                        settings[key] = value;\r\n                    }\r\n\r\n                });\r\n                processQueue.push(settings);\r\n            });\r\n            options.processQueue = processQueue;\r\n        },\r\n\r\n        // Returns the number of files currently in the processsing queue:\r\n        processing: function () {\r\n            return this._processing;\r\n        },\r\n\r\n        // Processes the files given as files property of the data parameter,\r\n        // returns a Promise object that allows to bind callbacks:\r\n        process: function (data) {\r\n            var that = this,\r\n                options = $.extend({}, this.options, data);\r\n            if (options.processQueue && options.processQueue.length) {\r\n                this._transformProcessQueue(options);\r\n                if (this._processing === 0) {\r\n                    this._trigger('processstart');\r\n                }\r\n                $.each(data.files, function (index) {\r\n                    var opts = index ? $.extend({}, options) : options,\r\n                        func = function () {\r\n                            if (data.errorThrown) {\r\n                                return $.Deferred()\r\n                                        .rejectWith(that, [data]).promise();\r\n                            }\r\n                            return that._processFile(opts, data);\r\n                        };\r\n                    opts.index = index;\r\n                    that._processing += 1;\r\n                    that._processingQueue = that._processingQueue.pipe(func, func)\r\n                        .always(function () {\r\n                            that._processing -= 1;\r\n                            if (that._processing === 0) {\r\n                                that._trigger('processstop');\r\n                            }\r\n                        });\r\n                });\r\n            }\r\n            return this._processingQueue;\r\n        },\r\n\r\n\r\n        options: {\r\n            // The list of processing actions:\r\n            processQueue: [\r\n                /*\r\n                {\r\n                    action: 'log',\r\n                    type: 'debug'\r\n                }\r\n                */\r\n            ],\r\n\r\n\r\n\r\n            // By default, files added to the widget are uploaded as soon\r\n            // as the user clicks on the start buttons. To enable automatic\r\n            // uploads, set the following option to true:\r\n            autoUpload: false,\r\n            // The ID of the upload template:\r\n            uploadTemplateId: 'template-upload',\r\n            // The ID of the download template:\r\n            downloadTemplateId: 'template-download',\r\n            // The container for the list of files. If undefined, it is set to\r\n            // an element with class \"files\" inside of the widget element:\r\n            filesContainer: undefined,\r\n            // By default, files are appended to the files container.\r\n            // Set the following option to true, to prepend files instead:\r\n            prependFiles: false,\r\n            // The expected data type of the upload response, sets the dataType\r\n            // option of the $.ajax upload requests:\r\n            dataType: 'json',\r\n\r\n            // Function returning the current number of files,\r\n            // used by the maxNumberOfFiles validation:\r\n            getNumberOfFiles: function () {\r\n                return this.filesContainer.children()\r\n                    .not('.processing').length;\r\n            },\r\n\r\n            // Callback to retrieve the list of files from the server response:\r\n            getFilesFromResponse: function (data) {\r\n                if (data.result && $.isArray(data.result.files)) {\r\n                    return data.result.files;\r\n                }\r\n                return [];\r\n            },\r\n\r\n            // The add callback is invoked as soon as files are added to the fileupload\r\n            // widget (via file input selection, drag & drop or add API call).\r\n            // See the basic file upload widget for more information:\r\n            add: function (e, data) {\r\n                //if (e.isDefaultPrevented()) {\r\n                //    return false;\r\n                //}\r\n                var $this = $(this),\r\n                    that = $this.data('blueimp-fileuploadui') ||\r\n                        $this.data('fileupload'),\r\n                    options = that.options;\r\n                data.context = that._renderUpload(data.files)\r\n                    .data('data', data)\r\n                    .addClass('processing');\r\n                options.filesContainer[\r\n                    options.prependFiles ? 'prepend' : 'append'\r\n                ](data.context);\r\n                that._forceReflow(data.context);\r\n                that._transition(data.context);\r\n//                data.process(function () {\r\n//                    return $this.fileupload('process', data);\r\n//                }).always(function () {\r\n                $this.fileuploadui('process', data).always(function () {\r\n                    data.context.each(function (index) {\r\n                        $(this).find('.size').text(\r\n                            that._formatFileSize(data.files[index].size)\r\n                        );\r\n                    }).removeClass('processing');\r\n                    that._renderPreviews(data);\r\n                }).done(function () {\r\n                    data.context.find('.start').prop('disabled', false);\r\n                    if ((that._trigger('added', null,data) !== false) &&\r\n                            (options.autoUpload || data.autoUpload) &&\r\n                            data.autoUpload !== false) {\r\n                        data.submit();\r\n                    }\r\n                }).fail(function () {\r\n                    if (data.files.error) {\r\n                        data.context.each(function (index) {\r\n                            var error = data.files[index].error;\r\n                            if (error) {\r\n                                $(this).find('.error').text(error);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            },\r\n            // Callback for the start of each file upload request:\r\n            send: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload');\r\n                if (data.context && data.dataType &&\r\n                        data.dataType.substr(0, 6) === 'iframe') {\r\n                    // Iframe Transport does not support progress events.\r\n                    // In lack of an indeterminate progress bar, we set\r\n                    // the progress to 100%, showing the full animated bar:\r\n                    data.context\r\n                        .find('.progress').addClass(\r\n                            !$.support.transition && 'progress-animated'\r\n                        )\r\n                        .attr('aria-valuenow', 100)\r\n                        .children().first().css(\r\n                            'width',\r\n                            '100%'\r\n                        );\r\n                }\r\n                return that._trigger('sent', null,data);\r\n            },\r\n            // Callback for successful uploads:\r\n            done: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload'),\r\n                    getFilesFromResponse = data.getFilesFromResponse ||\r\n                        that.options.getFilesFromResponse,\r\n                    files = getFilesFromResponse(data),\r\n                    template,\r\n                    deferred;\r\n                if (data.context) {\r\n                    data.context.each(function (index) {\r\n                        var file = files[index] ||\r\n                                {error: 'Empty file upload result'};\r\n                        deferred = that._addFinishedDeferreds();\r\n                        that._transition($(this)).done(\r\n                            function () {\r\n                                var node = $(this);\r\n//                                template = that._renderDownload([file]);\r\n                                template = that._renderDownload([file])\r\n                                    .replaceAll(node);\r\n                                that._forceReflow(template);\r\n                                that._transition(template).done(\r\n                                    function () {\r\n                                        data.context = $(this);\r\n                                        that._trigger('completed', null,data);\r\n                                        that._trigger('finished', null,data);\r\n                                        deferred.resolve();\r\n                                    }\r\n                                );\r\n                            }\r\n                        );\r\n                    });\r\n                } else {\r\n                    template = that._renderDownload(files)[\r\n                        that.options.prependFiles ? 'prependTo' : 'appendTo'\r\n                    ](that.options.filesContainer);\r\n                    that._forceReflow(template);\r\n                    deferred = that._addFinishedDeferreds();\r\n                    that._transition(template).done(\r\n                        function () {\r\n                            data.context = $(this);\r\n                            that._trigger('completed', null,data);\r\n                            that._trigger('finished', null,data);\r\n                            deferred.resolve();\r\n                        }\r\n                    );\r\n                }\r\n            },\r\n            // Callback for failed (abort or error) uploads:\r\n            fail: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload'),\r\n                    template,\r\n                    deferred;\r\n                if (data.context) {\r\n                    data.context.each(function (index) {\r\n                        if (data.errorThrown !== 'abort') {\r\n                            var file = data.files[index];\r\n                            file.error = file.error || data.errorThrown ||\r\n                                true;\r\n                            deferred = that._addFinishedDeferreds();\r\n                            that._transition($(this)).done(\r\n                                function () {\r\n                                    var node = $(this);\r\n                                    template = that._renderDownload([file])\r\n                                        .replaceAll(node);\r\n                                    that._forceReflow(template);\r\n                                    that._transition(template).done(\r\n                                        function () {\r\n                                            data.context = $(this);\r\n                                            that._trigger('failed', null,data);\r\n                                            that._trigger('finished', null,data);\r\n                                            deferred.resolve();\r\n                                        }\r\n                                    );\r\n                                }\r\n                            );\r\n                        } else {\r\n                            deferred = that._addFinishedDeferreds();\r\n                            that._transition($(this)).done(\r\n                                function () {\r\n                                    $(this).remove();\r\n                                    that._trigger('failed', null,data);\r\n                                    that._trigger('finished', null,data);\r\n                                    deferred.resolve();\r\n                                }\r\n                            );\r\n                        }\r\n                    });\r\n                } else if (data.errorThrown !== 'abort') {\r\n                    data.context = that._renderUpload(data.files)[\r\n                        that.options.prependFiles ? 'prependTo' : 'appendTo'\r\n                    ](that.options.filesContainer)\r\n                        .data('data', data);\r\n                    that._forceReflow(data.context);\r\n                    deferred = that._addFinishedDeferreds();\r\n                    that._transition(data.context).done(\r\n                        function () {\r\n                            data.context = $(this);\r\n                            that._trigger('failed', null,data);\r\n                            that._trigger('finished', null,data);\r\n                            deferred.resolve();\r\n                        }\r\n                    );\r\n                } else {\r\n                    that._trigger('failed', null,data);\r\n                    that._trigger('finished', null,data);\r\n                    that._addFinishedDeferreds().resolve();\r\n                }\r\n            },\r\n            // Callback for upload progress events:\r\n            progress: function (e, data) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var progress = Math.floor(data.loaded / data.total * 100);\r\n                if (data.context) {\r\n                    data.context.each(function () {\r\n                        $(this).find('.progress')\r\n                            .attr('aria-valuenow', progress)\r\n                            .children().first().css(\r\n                                'width',\r\n                                progress + '%'\r\n                            );\r\n                    });\r\n                }\r\n            },\r\n            // Callback for global upload progress events:\r\n            progressall: function (e, data) {\r\n                //if (e.isDefaultPrevented()) {\r\n                //    return false;\r\n                //}\r\n                var $this = $(this),\r\n                    progress = Math.floor(data.loaded / data.total * 100),\r\n                    globalProgressNode = $this.find('.fileupload-progress'),\r\n                    extendedProgressNode = globalProgressNode\r\n                        .find('.progress-extended');\r\n                if (extendedProgressNode.length) {\r\n                    extendedProgressNode.html(\r\n                        ($this.data('blueimp-fileuploadui') || $this.data('fileupload'))\r\n                            ._renderExtendedProgress(data)\r\n                    );\r\n                }\r\n                globalProgressNode\r\n                    .find('.progress')\r\n                    .attr('aria-valuenow', progress)\r\n                    .children().first().css(\r\n                        'width',\r\n                        progress + '%'\r\n                    );\r\n            },\r\n            // Callback for uploads start, equivalent to the global ajaxStart event:\r\n            start: function (e) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload');\r\n                that._resetFinishedDeferreds();\r\n                that._transition($(this).find('.fileupload-progress')).done(\r\n                    function () {\r\n                        that._trigger('started', null);\r\n                    }\r\n                );\r\n            },\r\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\r\n            stop: function (e) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload'),\r\n                    deferred = that._addFinishedDeferreds();\r\n                $.when.apply($, that._getFinishedDeferreds())\r\n                    .done(function () {\r\n                        that._trigger('stopped', null);\r\n                    });\r\n                that._transition($(this).find('.fileupload-progress')).done(\r\n                    function () {\r\n                        $(this).find('.progress')\r\n                            .attr('aria-valuenow', '0')\r\n                            .children().first().css('width', '0%');\r\n                        $(this).find('.progress-extended').html('&nbsp;');\r\n                        deferred.resolve();\r\n                    }\r\n                );\r\n            },\r\n            processstart: function (e) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                $(this).addClass('fileupload-processing');\r\n            },\r\n            processstop: function (e) {\r\n                if (e.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n                $(this).removeClass('fileupload-processing');\r\n            },\r\n            // Callback for file deletion:\r\n            destroy: function (e, data) {\r\n                //if (e.isDefaultPrevented()) {\r\n                //    return false;\r\n                //}\r\n                var that = $(this).data('blueimp-fileuploadui') ||\r\n                        $(this).data('fileupload'),\r\n                    removeNode = function () {\r\n                        that._transition(data.context).done(\r\n                            function () {\r\n                                $(this).remove();\r\n                                that._trigger('destroyed', null,data);\r\n                            }\r\n                        );\r\n                    };\r\n                if (data.url) {\r\n                    data.dataType = data.dataType || that.options.dataType;\r\n                    $.ajax(data).done(removeNode).fail(function () {\r\n                        that._trigger('destroyfailed', null,data);\r\n                    });\r\n                } else {\r\n                    removeNode();\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n        _resetFinishedDeferreds: function () {\r\n            this._finishedUploads = [];\r\n        },\r\n\r\n        _addFinishedDeferreds: function (deferred) {\r\n            if (!deferred) {\r\n                deferred = $.Deferred();\r\n            }\r\n            this._finishedUploads.push(deferred);\r\n            return deferred;\r\n        },\r\n\r\n        _getFinishedDeferreds: function () {\r\n            return this._finishedUploads;\r\n        },\r\n\r\n        // Link handler, that allows to download files\r\n        // by drag & drop of the links to the desktop:\r\n        _enableDragToDesktop: function () {\r\n            var link = $(this),\r\n                url = link.prop('href'),\r\n                name = link.prop('download'),\r\n                type = 'application/octet-stream';\r\n            link.bind('dragstart', function (e) {\r\n                try {\r\n                    e.originalEvent.dataTransfer.setData(\r\n                        'DownloadURL',\r\n                        [type, name, url].join(':')\r\n                    );\r\n                } catch (ignore) {}\r\n            });\r\n        },\r\n\r\n        _formatFileSize: function (bytes) {\r\n            if (typeof bytes !== 'number') {\r\n                return '';\r\n            }\r\n            if (bytes >= 1000000000) {\r\n                return (bytes / 1000000000).toFixed(2) + ' GB';\r\n            }\r\n            if (bytes >= 1000000) {\r\n                return (bytes / 1000000).toFixed(2) + ' MB';\r\n            }\r\n            return (bytes / 1000).toFixed(2) + ' KB';\r\n        },\r\n\r\n        _formatBitrate: function (bits) {\r\n            if (typeof bits !== 'number') {\r\n                return '';\r\n            }\r\n            if (bits >= 1000000000) {\r\n                return (bits / 1000000000).toFixed(2) + ' Gbit/s';\r\n            }\r\n            if (bits >= 1000000) {\r\n                return (bits / 1000000).toFixed(2) + ' Mbit/s';\r\n            }\r\n            if (bits >= 1000) {\r\n                return (bits / 1000).toFixed(2) + ' kbit/s';\r\n            }\r\n            return bits.toFixed(2) + ' bit/s';\r\n        },\r\n\r\n        _formatTime: function (seconds) {\r\n            var date = new Date(seconds * 1000),\r\n                days = Math.floor(seconds / 86400);\r\n            days = days ? days + 'd ' : '';\r\n            return days +\r\n                ('0' + date.getUTCHours()).slice(-2) + ':' +\r\n                ('0' + date.getUTCMinutes()).slice(-2) + ':' +\r\n                ('0' + date.getUTCSeconds()).slice(-2);\r\n        },\r\n\r\n        _formatPercentage: function (floatValue) {\r\n            return (floatValue * 100).toFixed(2) + ' %';\r\n        },\r\n\r\n        _renderExtendedProgress: function (data) {\r\n            return this._formatBitrate(data.bitrate) + ' | ' +\r\n                this._formatTime(\r\n                    (data.total - data.loaded) * 8 / data.bitrate\r\n                ) + ' | ' +\r\n                this._formatPercentage(\r\n                    data.loaded / data.total\r\n                ) + ' | ' +\r\n                this._formatFileSize(data.loaded) + ' / ' +\r\n                this._formatFileSize(data.total);\r\n        },\r\n\r\n        _renderTemplate: function (func, files) {\r\n            if (!func) {\r\n                return $();\r\n            }\r\n            var result = func({\r\n                files: files,\r\n                formatFileSize: this._formatFileSize,\r\n                options: this.options\r\n            });\r\n            if (result instanceof $) {\r\n                return result;\r\n            }\r\n            return $(this.options.templatesContainer).html(result).children();\r\n        },\r\n\r\n        _renderPreviews: function (data) {\r\n            data.context.find('.preview').each(function (index, elm) {\r\n                $(elm).append(data.files[index].preview);\r\n            });\r\n        },\r\n\r\n        _renderUpload: function (files) {\r\n            return this._renderTemplate(\r\n                this.options.uploadTemplate,\r\n                files\r\n            );\r\n        },\r\n\r\n        _renderDownload: function (files) {\r\n            return this._renderTemplate(\r\n                this.options.downloadTemplate,\r\n                files\r\n            ).find('a[download]').each(this._enableDragToDesktop).end();\r\n        },\r\n\r\n        _startHandler: function (e) {\r\n            e.preventDefault();\r\n            var button = $(e.currentTarget),\r\n                template = button.closest('.template-upload'),\r\n                data = template.data('data');\r\n            button.prop('disabled', true);\r\n            if (data && data.submit) {\r\n                data.submit();\r\n            }\r\n        },\r\n\r\n        _cancelHandler: function (e) {\r\n            e.preventDefault();\r\n            var template = $(e.currentTarget)\r\n                    .closest('.template-upload,.template-download'),\r\n                data = template.data('data') || {};\r\n            data.context = data.context || template;\r\n            if (data.abort) {\r\n                data.abort();\r\n            } else {\r\n                data.errorThrown = 'abort';\r\n                this._trigger('fail', null,data);\r\n            }\r\n        },\r\n\r\n        _deleteHandler: function (e) {\r\n            e.preventDefault();\r\n            var button = $(e.currentTarget);\r\n            this._trigger('destroy', null, $.extend({\r\n                context: button.closest('.template-download'),\r\n                type: 'DELETE'\r\n            }, button.data()));\r\n        },\r\n\r\n        _forceReflow: function (node) {\r\n            return $.support.transition && node.length &&\r\n                node[0].offsetWidth;\r\n        },\r\n\r\n        _transition: function (node) {\r\n            var dfd = $.Deferred();\r\n            if ($.support.transition && node.hasClass('fade') && node.is(':visible')) {\r\n                node.bind(\r\n                    $.support.transition.end,\r\n                    function (e) {\r\n                        // Make sure we don't respond to other transitions events\r\n                        // in the container element, e.g. from button elements:\r\n                        if (e.target === node[0]) {\r\n                            node.unbind($.support.transition.end);\r\n                            dfd.resolveWith(node);\r\n                        }\r\n                    }\r\n                ).toggleClass('in');\r\n            } else {\r\n                node.toggleClass('in');\r\n                dfd.resolveWith(node);\r\n            }\r\n            return dfd;\r\n        },\r\n\r\n        _initButtonBarEventHandlers: function () {\r\n            var fileUploadButtonBar = this.element.find('.fileupload-buttonbar'),\r\n                filesList = this.options.filesContainer;\r\n            this._on(fileUploadButtonBar.find('.start'), {\r\n                click: function (e) {\r\n                    e.preventDefault();\r\n                    filesList.find('.start').click();\r\n                }\r\n            });\r\n            this._on(fileUploadButtonBar.find('.cancel'), {\r\n                click: function (e) {\r\n                    e.preventDefault();\r\n                    filesList.find('.cancel').click();\r\n                }\r\n            });\r\n            this._on(fileUploadButtonBar.find('.delete'), {\r\n                click: function (e) {\r\n                    e.preventDefault();\r\n                    filesList.find('.toggle:checked')\r\n                        .closest('.template-download')\r\n                        .find('.delete').click();\r\n                    fileUploadButtonBar.find('.toggle')\r\n                        .prop('checked', false);\r\n                }\r\n            });\r\n            this._on(fileUploadButtonBar.find('.toggle'), {\r\n                change: function (e) {\r\n                    filesList.find('.toggle').prop(\r\n                        'checked',\r\n                        $(e.currentTarget).is(':checked')\r\n                    );\r\n                }\r\n            });\r\n        },\r\n\r\n        _destroyButtonBarEventHandlers: function () {\r\n            this._off(\r\n                this.element.find('.fileupload-buttonbar')\r\n                    .find('.start, .cancel, .delete'),\r\n                'click'\r\n            );\r\n            this._off(\r\n                this.element.find('.fileupload-buttonbar .toggle'),\r\n                'change.'\r\n            );\r\n        },\r\n\r\n        _initEventHandlers: function () {\r\n            //this._super();\r\n            this._on(this.options.filesContainer, {\r\n                'click .start': this._startHandler,\r\n                'click .cancel': this._cancelHandler,\r\n                'click .delete': this._deleteHandler\r\n            });\r\n            this._initButtonBarEventHandlers();\r\n        },\r\n\r\n        _destroyEventHandlers: function () {\r\n            this._destroyButtonBarEventHandlers();\r\n            this._off(this.options.filesContainer, 'click');\r\n            this._super();\r\n        },\r\n\r\n        _enableFileInputButton: function () {\r\n            this.element.find('.fileinput-button input')\r\n                .prop('disabled', false)\r\n                .parent().removeClass('disabled');\r\n        },\r\n\r\n        _disableFileInputButton: function () {\r\n            this.element.find('.fileinput-button input')\r\n                .prop('disabled', true)\r\n                .parent().addClass('disabled');\r\n        },\r\n\r\n        _initTemplates: function () {\r\n            var options = this.options;\r\n            options.templatesContainer = this.document[0].createElement(\r\n                options.filesContainer.prop('nodeName')\r\n            );\r\n            if (tmpl) {\r\n                if (options.uploadTemplateId) {\r\n                    options.uploadTemplate = tmpl(options.uploadTemplateId);\r\n                }\r\n                if (options.downloadTemplateId) {\r\n                    options.downloadTemplate = tmpl(options.downloadTemplateId);\r\n                }\r\n            }\r\n        },\r\n\r\n        _initFilesContainer: function () {\r\n            var options = this.options;\r\n            if (options.filesContainer === undefined) {\r\n                options.filesContainer = this.element.find('.files');\r\n            } else if (!(options.filesContainer instanceof $)) {\r\n                options.filesContainer = $(options.filesContainer);\r\n            }\r\n        },\r\n\r\n        _initSpecialOptions: function () {\r\n            //this._super();\r\n            this._initFilesContainer();\r\n            this._initTemplates();\r\n        },\r\n\r\n        _create: function () {\r\n            this._super();\r\n\r\n            this._processing = 0;\r\n            this._processingQueue = $.Deferred().resolveWith(this)\r\n                .promise();\r\n\r\n\r\n            this._initSpecialOptions();\r\n            this._initEventHandlers();\r\n\r\n            $(this.element).fileupload(this.options);\r\n            this._resetFinishedDeferreds();\r\n            if (!$.support.fileInput) {\r\n                this._disableFileInputButton();\r\n            }\r\n        },\r\n\r\n        enable: function () {\r\n            var wasDisabled = false;\r\n            if (this.options.disabled) {\r\n                wasDisabled = true;\r\n            }\r\n            this._super();\r\n            if (wasDisabled) {\r\n                this.element.find('input, button').prop('disabled', false);\r\n                this._enableFileInputButton();\r\n            }\r\n        },\r\n\r\n        disable: function () {\r\n            if (!this.options.disabled) {\r\n                this.element.find('input, button').prop('disabled', true);\r\n                this._disableFileInputButton();\r\n            }\r\n            this._super();\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n});\r\n\ndefine('skylark-blueimp-uploader/addons/image',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-imagex\",\r\n    'skylark-jquery',\r\n    'skylark-jqueryui/widget',\r\n    \"../fileupload-ui\"\r\n],function (langx,eventer,imagex,$) {\r\n    'use strict';\r\n\r\n    // Prepend to the default processQueue:\r\n    $.blueimp.fileuploadui.prototype.options.processQueue.unshift(\r\n        {\r\n            action: 'loadImageMetaData',\r\n            disableImageHead: '@',\r\n            disableExif: '@',\r\n            disableExifThumbnail: '@',\r\n            disableExifSub: '@',\r\n            disableExifGps: '@',\r\n            disabled: '@disableImageMetaDataLoad'\r\n        },\r\n        {\r\n            action: 'loadImage',\r\n            // Use the action as prefix for the \"@\" options:\r\n            prefix: true,\r\n            fileTypes: '@',\r\n            maxFileSize: '@',\r\n            noRevoke: '@',\r\n            disabled: '@disableImageLoad'\r\n        },\r\n        {\r\n            action: 'resizeImage',\r\n            // Use \"image\" as prefix for the \"@\" options:\r\n            prefix: 'image',\r\n            maxWidth: '@',\r\n            maxHeight: '@',\r\n            minWidth: '@',\r\n            minHeight: '@',\r\n            crop: '@',\r\n            orientation: '@',\r\n            forceResize: '@',\r\n            disabled: '@disableImageResize'\r\n        },\r\n        {\r\n            action: 'saveImage',\r\n            quality: '@imageQuality',\r\n            type: '@imageType',\r\n            disabled: '@disableImageResize'\r\n        },\r\n        {\r\n            action: 'saveImageMetaData',\r\n            disabled: '@disableImageMetaDataSave'\r\n        },\r\n        {\r\n            action: 'resizeImage',\r\n            // Use \"preview\" as prefix for the \"@\" options:\r\n            prefix: 'preview',\r\n            maxWidth: '@',\r\n            maxHeight: '@',\r\n            minWidth: '@',\r\n            minHeight: '@',\r\n            crop: '@',\r\n            orientation: '@',\r\n            thumbnail: '@',\r\n            canvas: '@',\r\n            disabled: '@disableImagePreview'\r\n        },\r\n        {\r\n            action: 'setImage',\r\n            name: '@imagePreviewName',\r\n            disabled: '@disableImagePreview'\r\n        },\r\n        {\r\n            action: 'deleteImageReferences',\r\n            disabled: '@disableImageReferencesDeletion'\r\n        }\r\n    );\r\n\r\n    // The File Upload Resize plugin extends the fileupload widget\r\n    // with image resize functionality:\r\n    $.widget('blueimp.fileuploadui', $.blueimp.fileuploadui, {\r\n\r\n        options: {\r\n            // The regular expression for the types of images to load:\r\n            // matched against the file type:\r\n            loadImageFileTypes: /^image\\/(gif|jpeg|png|svg\\+xml)$/,\r\n            // The maximum file size of images to load:\r\n            loadImageMaxFileSize: 10000000, // 10MB\r\n            // The maximum width of resized images:\r\n            imageMaxWidth: 1920,\r\n            // The maximum height of resized images:\r\n            imageMaxHeight: 1080,\r\n            // Defines the image orientation (1-8) or takes the orientation\r\n            // value from Exif data if set to true:\r\n            imageOrientation: false,\r\n            // Define if resized images should be cropped or only scaled:\r\n            imageCrop: false,\r\n            // Disable the resize image functionality by default:\r\n            disableImageResize: true,\r\n            // The maximum width of the preview images:\r\n            previewMaxWidth: 80,\r\n            // The maximum height of the preview images:\r\n            previewMaxHeight: 80,\r\n            // Defines the preview orientation (1-8) or takes the orientation\r\n            // value from Exif data if set to true:\r\n            previewOrientation: true,\r\n            // Create the preview using the Exif data thumbnail:\r\n            previewThumbnail: true,\r\n            // Define if preview images should be cropped or only scaled:\r\n            previewCrop: false,\r\n            // Define if preview images should be resized as canvas elements:\r\n            previewCanvas: true\r\n        },\r\n\r\n        processActions: {\r\n\r\n            // Loads the image given via data.files and data.index\r\n            // as img element, if the browser supports the File API.\r\n            // Accepts the options fileTypes (regular expression)\r\n            // and maxFileSize (integer) to limit the files to load:\r\n            loadImage: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var that = this,\r\n                    file = data.files[data.index],\r\n                    dfd = $.Deferred();\r\n                if (($.type(options.maxFileSize) === 'number' &&\r\n                            file.size > options.maxFileSize) ||\r\n                        (options.fileTypes &&\r\n                            !options.fileTypes.test(file.type)) ||\r\n                        !imagex.loadFile(\r\n                            file,\r\n                            function (img) {\r\n                                if (img.src) {\r\n                                    data.img = img;\r\n                                }\r\n                                dfd.resolveWith(that, [data]);\r\n                            },\r\n                            options\r\n                        )) {\r\n                    return data;\r\n                }\r\n                return dfd.promise();\r\n            },\r\n\r\n            // Resizes the image given as data.canvas or data.img\r\n            // and updates data.canvas or data.img with the resized image.\r\n            // Also stores the resized image as preview property.\r\n            // Accepts the options maxWidth, maxHeight, minWidth,\r\n            // minHeight, canvas and crop:\r\n            resizeImage: function (data, options) {\r\n                if (options.disabled || !(data.canvas || data.img)) {\r\n                    return data;\r\n                }\r\n                options = $.extend({canvas: true}, options);\r\n                var that = this,\r\n                    dfd = $.Deferred(),\r\n                    img = (options.canvas && data.canvas) || data.img,\r\n                    resolve = function (newImg) {\r\n                        if (newImg && (newImg.width !== img.width ||\r\n                                newImg.height !== img.height ||\r\n                                options.forceResize)) {\r\n                            data[newImg.getContext ? 'canvas' : 'img'] = newImg;\r\n                        }\r\n                        data.preview = newImg;\r\n                        dfd.resolveWith(that, [data]);\r\n                    },\r\n                    thumbnail;\r\n                if (data.exif) {\r\n                    if (options.orientation === true) {\r\n                        options.orientation = data.exif.get('Orientation');\r\n                    }\r\n                    if (options.thumbnail) {\r\n                        thumbnail = data.exif.get('Thumbnail');\r\n                        if (thumbnail) {\r\n                            imagex.loadFile(thumbnail, resolve, options);\r\n                            return dfd.promise();\r\n                        }\r\n                    }\r\n                    // Prevent orienting the same image twice:\r\n                    if (data.orientation) {\r\n                        delete options.orientation;\r\n                    } else {\r\n                        data.orientation = options.orientation;\r\n                    }\r\n                }\r\n                if (img) {\r\n                    resolve(imagex.scale(img, options));\r\n                    return dfd.promise();\r\n                }\r\n                return data;\r\n            },\r\n\r\n            // Saves the processed image given as data.canvas\r\n            // inplace at data.index of data.files:\r\n            saveImage: function (data, options) {\r\n                if (!data.canvas || options.disabled) {\r\n                    return data;\r\n                }\r\n                var that = this,\r\n                    file = data.files[data.index],\r\n                    dfd = $.Deferred();\r\n                if (data.canvas.toBlob) {\r\n                    data.canvas.toBlob(\r\n                        function (blob) {\r\n                            if (!blob.name) {\r\n                                if (file.type === blob.type) {\r\n                                    blob.name = file.name;\r\n                                } else if (file.name) {\r\n                                    blob.name = file.name.replace(\r\n                                        /\\..+$/,\r\n                                        '.' + blob.type.substr(6)\r\n                                    );\r\n                                }\r\n                            }\r\n                            // Don't restore invalid meta data:\r\n                            if (file.type !== blob.type) {\r\n                                delete data.imageHead;\r\n                            }\r\n                            // Store the created blob at the position\r\n                            // of the original file in the files list:\r\n                            data.files[data.index] = blob;\r\n                            dfd.resolveWith(that, [data]);\r\n                        },\r\n                        options.type || file.type,\r\n                        options.quality\r\n                    );\r\n                } else {\r\n                    return data;\r\n                }\r\n                return dfd.promise();\r\n            },\r\n\r\n            loadImageMetaData: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var that = this,\r\n                    dfd = $.Deferred();\r\n                imagex.meta.parseMetaData(data.files[data.index], function (result) {\r\n                    $.extend(data, result);\r\n                    dfd.resolveWith(that, [data,\"aaa\"]);\r\n                }, options);\r\n                return dfd.promise();\r\n            },\r\n\r\n            saveImageMetaData: function (data, options) {\r\n                if (!(data.imageHead && data.canvas &&\r\n                        data.canvas.toBlob && !options.disabled)) {\r\n                    return data;\r\n                }\r\n                var file = data.files[data.index],\r\n                    blob = new Blob([\r\n                        data.imageHead,\r\n                        // Resized images always have a head size of 20 bytes,\r\n                        // including the JPEG marker and a minimal JFIF header:\r\n                        this._blobSlice.call(file, 20)\r\n                    ], {type: file.type});\r\n                blob.name = file.name;\r\n                data.files[data.index] = blob;\r\n                return data;\r\n            },\r\n\r\n            // Sets the resized version of the image as a property of the\r\n            // file object, must be called after \"saveImage\":\r\n            setImage: function (data, options) {\r\n                if (data.preview && !options.disabled) {\r\n                    data.files[data.index][options.name || 'preview'] = data.preview;\r\n                }\r\n                return data;\r\n            },\r\n\r\n            deleteImageReferences: function (data, options) {\r\n                if (!options.disabled) {\r\n                    delete data.img;\r\n                    delete data.canvas;\r\n                    delete data.preview;\r\n                    delete data.imageHead;\r\n                }\r\n                return data;\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n});\r\n\ndefine('skylark-blueimp-uploader/addons/audio',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-imagex\",\r\n    'skylark-jquery',\r\n    'skylark-jqueryui/widget',\r\n    \"../fileupload-ui\"\r\n],function (langx,eventer,imagex,$) {\r\n    'use strict';\r\n\r\n    // Prepend to the default processQueue:\r\n    $.blueimp.fileuploadui.prototype.options.processQueue.unshift(\r\n        {\r\n            action: 'loadAudio',\r\n            // Use the action as prefix for the \"@\" options:\r\n            prefix: true,\r\n            fileTypes: '@',\r\n            maxFileSize: '@',\r\n            disabled: '@disableAudioPreview'\r\n        },\r\n        {\r\n            action: 'setAudio',\r\n            name: '@audioPreviewName',\r\n            disabled: '@disableAudioPreview'\r\n        }\r\n    );\r\n\r\n    // The File Upload Audio Preview plugin extends the fileupload widget\r\n    // with audio preview functionality:\r\n    $.widget('blueimp.fileuploadui', $.blueimp.fileuploadui, {\r\n\r\n        options: {\r\n            // The regular expression for the types of audio files to load,\r\n            // matched against the file type:\r\n            loadAudioFileTypes: /^audio\\/.*$/\r\n        },\r\n\r\n        _audioElement: document.createElement('audio'),\r\n\r\n        processActions: {\r\n\r\n            // Loads the audio file given via data.files and data.index\r\n            // as audio element if the browser supports playing it.\r\n            // Accepts the options fileTypes (regular expression)\r\n            // and maxFileSize (integer) to limit the files to load:\r\n            loadAudio: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var file = data.files[data.index],\r\n                    url,\r\n                    audio;\r\n                if (this._audioElement.canPlayType &&\r\n                        this._audioElement.canPlayType(file.type) &&\r\n                        ($.type(options.maxFileSize) !== 'number' ||\r\n                            file.size <= options.maxFileSize) &&\r\n                        (!options.fileTypes ||\r\n                            options.fileTypes.test(file.type))) {\r\n                    url = imagex.createObjectURL(file);\r\n                    if (url) {\r\n                        audio = this._audioElement.cloneNode(false);\r\n                        audio.src = url;\r\n                        audio.controls = true;\r\n                        data.audio = audio;\r\n                        return data;\r\n                    }\r\n                }\r\n                return data;\r\n            },\r\n\r\n            // Sets the audio element as a property of the file object:\r\n            setAudio: function (data, options) {\r\n                if (data.audio && !options.disabled) {\r\n                    data.files[data.index][options.name || 'preview'] = data.audio;\r\n                }\r\n                return data;\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n\r\n});\r\n\ndefine('skylark-blueimp-uploader/addons/video',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-imagex\",\r\n    'skylark-jquery',\r\n    'skylark-jqueryui/widget',\r\n    \"../fileupload-ui\"\r\n],function (langx,eventer,imagex,$) {\r\n    'use strict';\r\n\r\n    // Prepend to the default processQueue:\r\n    $.blueimp.fileuploadui.prototype.options.processQueue.unshift(\r\n        {\r\n            action: 'loadVideo',\r\n            // Use the action as prefix for the \"@\" options:\r\n            prefix: true,\r\n            fileTypes: '@',\r\n            maxFileSize: '@',\r\n            disabled: '@disableVideoPreview'\r\n        },\r\n        {\r\n            action: 'setVideo',\r\n            name: '@videoPreviewName',\r\n            disabled: '@disableVideoPreview'\r\n        }\r\n    );\r\n\r\n    // The File Upload Video Preview plugin extends the fileupload widget\r\n    // with video preview functionality:\r\n    $.widget('blueimp.fileuploadui', $.blueimp.fileuploadui, {\r\n\r\n        options: {\r\n            // The regular expression for the types of video files to load,\r\n            // matched against the file type:\r\n            loadVideoFileTypes: /^video\\/.*$/\r\n        },\r\n\r\n        _videoElement: document.createElement('video'),\r\n\r\n        processActions: {\r\n\r\n            // Loads the video file given via data.files and data.index\r\n            // as video element if the browser supports playing it.\r\n            // Accepts the options fileTypes (regular expression)\r\n            // and maxFileSize (integer) to limit the files to load:\r\n            loadVideo: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var file = data.files[data.index],\r\n                    url,\r\n                    video;\r\n                if (this._videoElement.canPlayType &&\r\n                        this._videoElement.canPlayType(file.type) &&\r\n                        ($.type(options.maxFileSize) !== 'number' ||\r\n                            file.size <= options.maxFileSize) &&\r\n                        (!options.fileTypes ||\r\n                            options.fileTypes.test(file.type))) {\r\n                    url = loadImage.createObjectURL(file);\r\n                    if (url) {\r\n                        video = this._videoElement.cloneNode(false);\r\n                        video.src = url;\r\n                        video.controls = true;\r\n                        data.video = video;\r\n                        return data;\r\n                    }\r\n                }\r\n                return data;\r\n            },\r\n\r\n            // Sets the video element as a property of the file object:\r\n            setVideo: function (data, options) {\r\n                if (data.video && !options.disabled) {\r\n                    data.files[data.index][options.name || 'preview'] = data.video;\r\n                }\r\n                return data;\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n\r\n});\r\n\ndefine('skylark-blueimp-uploader/addons/validate',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/eventer\",\r\n    'skylark-jquery',\r\n    'skylark-jqueryui/widget',\r\n    \"../fileupload-ui\"\r\n],function (langx,eventer,$) {\r\n    'use strict';\r\n\r\n    // Append to the default processQueue:\r\n    $.blueimp.fileuploadui.prototype.options.processQueue.push(\r\n        {\r\n            action: 'validate',\r\n            // Always trigger this action,\r\n            // even if the previous action was rejected: \r\n            always: true,\r\n            // Options taken from the global options map:\r\n            acceptFileTypes: '@',\r\n            maxFileSize: '@',\r\n            minFileSize: '@',\r\n            maxNumberOfFiles: '@',\r\n            disabled: '@disableValidation'\r\n        }\r\n    );\r\n\r\n    // The File Upload Validation plugin extends the fileupload widget\r\n    // with file validation functionality:\r\n    $.widget('blueimp.fileuploadui', $.blueimp.fileuploadui, {\r\n\r\n        options: {\r\n            /*\r\n            // The regular expression for allowed file types, matches\r\n            // against either file type or file name:\r\n            acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\r\n            // The maximum allowed file size in bytes:\r\n            maxFileSize: 10000000, // 10 MB\r\n            // The minimum allowed file size in bytes:\r\n            minFileSize: undefined, // No minimal file size\r\n            // The limit of files to be uploaded:\r\n            maxNumberOfFiles: 10,\r\n            */\r\n\r\n            // Function returning the current number of files,\r\n            // has to be overriden for maxNumberOfFiles validation:\r\n            getNumberOfFiles: $.noop,\r\n\r\n            // Error and info messages:\r\n            messages: {\r\n                maxNumberOfFiles: 'Maximum number of files exceeded',\r\n                acceptFileTypes: 'File type not allowed',\r\n                maxFileSize: 'File is too large',\r\n                minFileSize: 'File is too small'\r\n            }\r\n        },\r\n\r\n        processActions: {\r\n\r\n            validate: function (data, options) {\r\n                if (options.disabled) {\r\n                    return data;\r\n                }\r\n                var dfd = $.Deferred(),\r\n                    settings = this.options,\r\n                    file = data.files[data.index],\r\n                    fileSize;\r\n                if (options.minFileSize || options.maxFileSize) {\r\n                    fileSize = file.size;\r\n                }\r\n                if ($.type(options.maxNumberOfFiles) === 'number' &&\r\n                        (settings.getNumberOfFiles() || 0) + data.files.length >\r\n                            options.maxNumberOfFiles) {\r\n                    file.error = settings.i18n('maxNumberOfFiles');\r\n                } else if (options.acceptFileTypes &&\r\n                        !(options.acceptFileTypes.test(file.type) ||\r\n                        options.acceptFileTypes.test(file.name))) {\r\n                    file.error = settings.i18n('acceptFileTypes');\r\n                } else if (fileSize > options.maxFileSize) {\r\n                    file.error = settings.i18n('maxFileSize');\r\n                } else if ($.type(fileSize) === 'number' &&\r\n                        fileSize < options.minFileSize) {\r\n                    file.error = settings.i18n('minFileSize');\r\n                } else {\r\n                    delete file.error;\r\n                }\r\n                if (file.error || data.files.error) {\r\n                    data.files.error = true;\r\n                    dfd.rejectWith(this, [data]);\r\n                } else {\r\n                    dfd.resolveWith(this, [data]);\r\n                }\r\n                return dfd.promise();\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    return $;\r\n\r\n});\r\n\ndefine('skylark-blueimp-uploader/main',[\r\n\t\"./fileupload-ui\",\r\n\t\"./addons/image\",\r\n\t\"./addons/audio\",\r\n\t\"./addons/video\",\r\n\t\"./addons/validate\"\r\n],function($) {\r\n\treturn $;\r\n});\ndefine('skylark-blueimp-uploader', ['skylark-blueimp-uploader/main'], function (main) { return main; });\n\n"]}